<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Football Tournament Manager</title>
    <style>
        /* --- CSS Variables (Base Dark Theme) --- */
        :root {
            --primary-bg: #1a1a2e;
            --secondary-bg: #2e2e4a;
            --card-bg: #2e2e4a;
            --text-color: #e0e0e0;
            --light-text-color: #a0a0a0;
            --border-color: #4a4a6a;
            --hover-bg: #3a3a5a;
            --accent-color: #e94560; /* Default accent */
            --button-bg: var(--accent-color);
            --button-text: white;
            --success-color: #4CAF50;
            --warning-color: #FFC107;
            --error-color: #F44336;
            --info-color: #2196F3;
            --header-bg: var(--secondary-bg);
            --sidebar-bg: var(--secondary-bg);
            --body-background-image: none;
            --body-background-size: auto;
            --body-background-position: center;
            --body-background-repeat: no-repeat;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            --input-bg: var(--hover-bg);
            --input-border: var(--border-color);
            --modal-bg: var(--primary-bg);
            --modal-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
            --link-color: var(--accent-color);
            --table-header-bg: var(--hover-bg);
            --table-row-even-bg: var(--secondary-bg);
            --table-row-odd-bg: var(--card-bg);
            --table-row-hover-bg: var(--hover-bg);
            --advancing-bg: rgba(76, 175, 80, 0.15);
            --relegating-bg: rgba(244, 67, 54, 0.15);
            --fab-bg: var(--accent-color);
            --fab-text: white;
            --fab-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
            --hamburger-color: var(--text-color);
            --header-text-color: var(--text-color);
            --sidebar-active-bg: var(--accent-color);
            --sidebar-active-text: white;
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --tab-inactive-text: var(--light-text-color);
            --tab-hover-text: var(--text-color);
            --knockout-line-color: var(--border-color);
            --knockout-arrow-color: var(--accent-color);
        }

        /* --- Light Mode --- */
        :root.light-mode {
            --primary-bg: #f0f2f5;
            --secondary-bg: #ffffff;
            --card-bg: #ffffff;
            --text-color: #333333;
            --light-text-color: #666666;
            --border-color: #e0e0e0;
            --hover-bg: #f5f5f5;
            --accent-color: #007bff; /* Default light accent */
            --button-bg: var(--accent-color);
            --button-text: white;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --error-color: #dc3545;
            --info-color: #17a2b8;
            --header-bg: var(--secondary-bg);
            --sidebar-bg: var(--secondary-bg);
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            --input-bg: #f8f9fa;
            --input-border: #ced4da;
            --modal-bg: var(--primary-bg);
            --modal-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            --link-color: var(--accent-color);
            --table-header-bg: #e9ecef;
            --table-row-even-bg: #f8f9fa;
            --table-row-odd-bg: #ffffff;
            --table-row-hover-bg: #e2e6ea;
            --advancing-bg: rgba(40, 167, 69, 0.1);
            --relegating-bg: rgba(220, 53, 69, 0.1);
            --fab-bg: var(--accent-color);
            --fab-text: white;
            --fab-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            --hamburger-color: var(--text-color);
            --header-text-color: var(--text-color);
            --sidebar-active-bg: var(--accent-color);
            --sidebar-active-text: white;
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --tab-inactive-text: var(--light-text-color);
            --tab-hover-text: var(--text-color);
            --knockout-line-color: var(--border-color);
            --knockout-arrow-color: var(--accent-color);
        }

        /* --- League Theme --- */
        :root.league-theme {
            --accent-color: #e94560; /* Vibrant Red */
            --primary-bg: #1a1a2e; /* Dark Blue */
            --secondary-bg: #2e2e4a; /* Slightly lighter dark blue */
            --header-bg: var(--primary-bg);
            --sidebar-bg: var(--primary-bg);
            --button-bg: var(--accent-color);
            --link-color: var(--accent-color);
            --sidebar-active-bg: var(--accent-color);
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --knockout-arrow-color: var(--accent-color);
            --body-background-image: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0.7)), url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="0" y="0" width="100" height="100" fill="%231a1a2e"/><path d="M0 0L100 100M100 0L0 100" stroke="%233a3a5a" stroke-width="0.5"/></svg>');
            --body-background-size: 200px;
            --body-background-position: center;
            --body-background-repeat: repeat;
        }
        :root.light-mode.league-theme {
            --accent-color: #dc3545; /* Vibrant Red for light mode */
            --primary-bg: #f0f2f5;
            --secondary-bg: #ffffff;
            --header-bg: var(--primary-bg);
            --sidebar-bg: var(--primary-bg);
            --sidebar-active-bg: var(--accent-color);
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --knockout-arrow-color: var(--accent-color);
            --body-background-image: linear-gradient(rgba(255,255,255,0.7), rgba(255,255,255,0.7)), url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="0" y="0" width="100" height="100" fill="%23f0f2f5"/><path d="M0 0L100 100M100 0L0 100" stroke="%23e0e0e0" stroke-width="0.5"/></svg>');
        }

        /* --- Champions League Theme --- */
        :root.champions-theme {
            --accent-color: #ffe600; /* Bright Star Yellow */
            --primary-bg: #0b0c2a; /* Midnight Navy */
            --secondary-bg: #1a1b3e; /* Slightly lighter navy */
            --header-bg: var(--primary-bg);
            --sidebar-bg: var(--primary-bg);
            --button-bg: var(--accent-color);
            --button-text: #0b0c2a; /* Dark text on yellow buttons */
            --link-color: var(--accent-color);
            --border-color: #4a4a6a;
            --hover-bg: #2a2b5e;
            --sidebar-active-bg: var(--accent-color);
            --sidebar-active-text: var(--primary-bg);
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --knockout-arrow-color: var(--accent-color);
            --body-background-image: radial-gradient(circle at center, #1a1b3e 0%, #0b0c2a 70%, #000000 100%);
            --body-background-size: cover;
            --body-background-position: center;
            --body-background-repeat: no-repeat;
            --card-shadow: 0 0 15px rgba(255, 230, 0, 0.2); /* Subtle glow */
        }
        :root.light-mode.champions-theme {
            --accent-color: #ffc107; /* Yellow for light mode */
            --primary-bg: #e0e0f0;
            --secondary-bg: #f0f0ff;
            --header-bg: var(--primary-bg);
            --sidebar-bg: var(--primary-bg);
            --button-text: #333;
            --sidebar-active-bg: var(--accent-color);
            --sidebar-active-text: var(--primary-bg);
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --knockout-arrow-color: var(--accent-color);
            --body-background-image: radial-gradient(circle at center, #f0f0ff 0%, #e0e0f0 70%, #d0d0e0 100%);
            --card-shadow: 0 0 10px rgba(255, 193, 7, 0.1);
        }

        /* --- World Cup Theme --- */
        :root.worldcup-theme {
            --accent-color: #ffd700; /* Gold */
            --primary-bg: #004d00; /* Rich Green */
            --secondary-bg: #006400; /* Slightly lighter green */
            --header-bg: var(--primary-bg);
            --sidebar-bg: var(--primary-bg);
            --button-bg: var(--accent-color);
            --button-text: #004d00; /* Dark green text on gold buttons */
            --link-color: var(--accent-color);
            --border-color: #3a7a3a;
            --hover-bg: #007a00;
            --sidebar-active-bg: var(--accent-color);
            --sidebar-active-text: var(--primary-bg);
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --knockout-arrow-color: var(--accent-color);
            --body-background-image: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="0" y="0" width="100" height="100" fill="%23006400"/><circle cx="50" cy="50" r="40" fill="none" stroke="%23008000" stroke-width="2"/><circle cx="50" cy="50" r="20" fill="none" stroke="%23008000" stroke-width="1"/></svg>');
            --body-background-size: 250px;
            --body-background-position: center;
            --body-background-repeat: repeat;
        }
        :root.light-mode.worldcup-theme {
            --accent-color: #daa520; /* Gold for light mode */
            --primary-bg: #e0ffe0;
            --secondary-bg: #f0fff0;
            --header-bg: var(--primary-bg);
            --sidebar-bg: var(--primary-bg);
            --button-text: #333;
            --sidebar-active-bg: var(--accent-color);
            --sidebar-active-text: var(--primary-bg);
            --tab-active-border: var(--accent-color);
            --tab-active-text: var(--accent-color);
            --knockout-arrow-color: var(--accent-color);
            --body-background-image: linear-gradient(rgba(255,255,255,0.5), rgba(255,255,255,0.5)), url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="0" y="0" width="100" height="100" fill="%23e0ffe0"/><circle cx="50" cy="50" r="40" fill="none" stroke="%23c0ffc0" stroke-width="2"/><circle cx="50" cy="50" r="20" fill="none" stroke="%23c0ffc0" stroke-width="1"/></svg>');
        }

        /* --- Base Styles --- */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--primary-bg);
            color: var(--text-color);
            display: grid;
            grid-template-columns: var(--sidebar-width) 1fr;
            grid-template-rows: auto 1fr;
            min-height: 100vh;
            overflow-x: hidden;
            font-size: 0.95rem;
            transition: background-color 0.3s ease, color 0.3s ease;
            background-image: var(--body-background-image);
            background-size: var(--body-background-size);
            background-position: var(--body-background-position);
            background-repeat: var(--body-background-repeat);
        }

        h1, h2, h3, h4, h5, h6 {
            color: var(--text-color);
            margin-top: 0;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        h1 { font-size: 2.2rem; }
        h2 { font-size: 1.8rem; }
        h3 { font-size: 1.4rem; }

        a {
            color: var(--link-color);
            text-decoration: none;
            transition: color 0.2s ease;
        }
        a:hover {
            text-decoration: underline;
            color: var(--accent-color);
        }

        button, .btn {
            background-color: var(--button-bg);
            color: var(--button-text);
            border: none;
            padding: 0.6rem 1rem;
            border-radius: 0.3rem;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.2s ease, color 0.2s ease, transform 0.1s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
        }
        button:hover, .btn:hover {
            background-color: var(--accent-color); /* Use accent for hover */
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        button:active, .btn:active {
            transform: translateY(0);
        }
        button:disabled, .btn:disabled {
            background-color: var(--border-color);
            cursor: not-allowed;
            opacity: 0.7;
            transform: none;
            box-shadow: none;
        }

        input[type="text"], input[type="number"], input[type="date"], select, textarea {
            background-color: var(--input-bg);
            border: 1px solid var(--input-border);
            color: var(--text-color);
            padding: 0.6rem 0.8rem;
            border-radius: 0.3rem;
            font-size: 0.9rem;
            width: 100%;
            box-sizing: border-box;
            transition: border-color 0.2s ease, background-color 0.2s ease;
        }
        input[type="text"]:focus, input[type="number"]:focus, input[type="date"]:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(var(--accent-color-rgb), 0.3);
        }

        label {
            display: block;
            margin-bottom: 0.4rem;
            color: var(--light-text-color);
            font-size: 0.85rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        /* --- Header Bar --- */
        #header-bar {
            grid-column: 1 / -1;
            grid-row: 1;
            background-color: var(--header-bg);
            padding: 0.8rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: var(--box-shadow);
            z-index: 200;
            position: sticky;
            top: 0;
            height: 3.5rem;
            box-sizing: border-box;
        }
        #header-bar .logo {
            font-size: 1.4rem;
            font-weight: bold;
            color: var(--header-text-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        #header-bar .logo span {
            color: var(--accent-color);
        }

        .hamburger-menu {
            display: none; /* Hidden on desktop */
            background: none;
            border: none;
            font-size: 1.8rem;
            color: var(--hamburger-color);
            cursor: pointer;
            padding: 0.2rem;
            line-height: 1;
        }

        .theme-toggle {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: background-color 0.2s ease;
        }
        .theme-toggle:hover {
            background-color: var(--hover-bg);
        }

        /* --- Sidebar --- */
        #sidebar {
            grid-column: 1;
            grid-row: 2;
            width: var(--sidebar-width);
            background-color: var(--sidebar-bg);
            padding: 1.5rem 1rem;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            flex-shrink: 0;
            overflow-y: auto;
            z-index: 150;
            transition: transform 0.3s ease;
        }

        #sidebar h2 {
            color: var(--accent-color);
            text-align: center;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }

        #sidebar nav ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        #sidebar nav ul li {
            margin-bottom: 0.3rem;
        }

        #sidebar nav ul li a, .sidebar-item {
            display: flex;
            align-items: center;
            gap: 0.8rem;
            padding: 0.7rem 1rem;
            color: var(--text-color);
            text-decoration: none;
            border-radius: 0.3rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            cursor: pointer;
        }

        #sidebar nav ul li a:hover, .sidebar-item:hover {
            background-color: var(--hover-bg);
            text-decoration: none;
        }

        #sidebar nav ul li a.active, .sidebar-item.active {
            background-color: var(--sidebar-active-bg);
            color: var(--sidebar-active-text);
            font-weight: 600;
        }

        .sidebar-section-title {
            color: var(--light-text-color);
            font-size: 0.8rem;
            margin-top: 1.5rem;
            margin-bottom: 0.8rem;
            padding: 0 1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 600;
        }

        .sidebar-tournament-list {
            max-height: 30vh; /* Adjust as needed */
            overflow-y: auto;
            margin-bottom: 1rem;
            border-top: 1px solid var(--border-color);
            padding-top: 1rem;
        }

        .sidebar-tournament-list .sidebar-item {
            padding-left: 1.8rem;
            font-size: 0.9rem;
        }

        /* --- Main Content --- */
        #main-content {
            grid-column: 2;
            grid-row: 2;
            padding: 1.5rem 2rem;
            overflow-y: auto;
            transition: opacity 0.3s ease; /* For theme switching animation */
        }

        #tournament-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        #tournament-header h1 {
            margin: 0;
            font-size: 2rem;
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        #tournament-tabs {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
            gap: 0.5rem;
        }

        .tab-button {
            background-color: transparent;
            border: none;
            padding: 0.8rem 1.2rem;
            color: var(--tab-inactive-text);
            cursor: pointer;
            font-size: 1rem;
            transition: color 0.2s ease, border-bottom 0.2s ease;
            border-bottom: 3px solid transparent;
            margin-bottom: -1px; /* To align with border */
            font-weight: 500;
        }

        .tab-button:hover {
            color: var(--tab-hover-text);
        }

        .tab-button.active {
            color: var(--tab-active-text);
            border-bottom: 3px solid var(--tab-active-border);
            font-weight: 600;
        }

        .tab-content {
            display: none;
            padding-top: 1rem;
        }

        .tab-content.active {
            display: block;
        }

        /* --- Utility Classes --- */
        .flex-row { display: flex; align-items: center; gap: 1rem; }
        .flex-col { display: flex; flex-direction: column; gap: 1rem; }
        .justify-between { justify-content: space-between; }
        .justify-center { justify-content: center; }
        .align-center { align-items: center; }
        .text-center { text-align: center; }
        .text-right { text-align: right; }
        .mt-1 { margin-top: 1rem; }
        .mb-1 { margin-bottom: 1rem; }
        .mb-2 { margin-bottom: 2rem; }
        .p-1 { padding: 1rem; }
        .p-2 { padding: 2rem; }
        .card {
            background-color: var(--card-bg);
            border-radius: 0.5rem;
            padding: 1.2rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 1rem;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--box-shadow);
        }
        .grid-2-col {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
            gap: 1.5rem;
        }
        .grid-3-col {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr));
            gap: 1.5rem;
        }
        .grid-4-col {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(min(100%, 220px), 1fr));
            gap: 1.5rem;
        }

        /* --- Tables --- */
        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch; /* For smooth scrolling on iOS */
            margin-bottom: 1rem;
        }
        .data-table {
            width: 100%;
            border-collapse: collapse;
            background-color: var(--card-bg);
            border-radius: 0.5rem;
            overflow: hidden;
            min-width: 600px; /* Ensure horizontal scroll on small screens */
        }

        .data-table th, .data-table td {
            padding: 0.8rem 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .data-table th {
            background-color: var(--table-header-bg);
            color: var(--light-text-color);
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.8rem;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .data-table tbody tr:nth-child(even) {
            background-color: var(--table-row-even-bg);
        }
        .data-table tbody tr:nth-child(odd) {
            background-color: var(--table-row-odd-bg);
        }
        .data-table tbody tr:hover {
            background-color: var(--table-row-hover-bg);
        }

        .data-table tbody tr:last-child td {
            border-bottom: none;
        }

        .data-table .team-name {
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .data-table .team-logo-placeholder {
            width: 1.8rem;
            height: 1.8rem;
            border-radius: 50%;
            background: linear-gradient(45deg, #ccc, #888);
            display: inline-block;
            vertical-align: middle;
            border: 1px solid var(--border-color);
            flex-shrink: 0;
        }

        .data-table .sortable {
            cursor: pointer;
            position: relative;
            padding-right: 1.5rem;
        }

        .data-table .sortable::after {
            content: '';
            position: absolute;
            right: 0.5rem;
            top: 50%;
            transform: translateY(-50%);
            width: 0;
            height: 0;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-top: 4px solid var(--light-text-color);
            opacity: 0.5;
        }

        .data-table .sortable.asc::after {
            border-top: none;
            border-bottom: 4px solid var(--accent-color);
            opacity: 1;
        }

        .data-table .sortable.desc::after {
            border-bottom: none;
            border-top: 4px solid var(--accent-color);
            opacity: 1;
        }

        /* --- Match Fixtures --- */
        .fixture-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
            gap: 1rem;
        }
        .fixture-list.single-column {
            grid-template-columns: 1fr;
        }

        .fixture-list .fixture-item {
            background-color: var(--card-bg);
            border-radius: 0.5rem;
            padding: 1rem 1.2rem;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
            border: 1px solid var(--border-color);
            box-shadow: var(--card-shadow);
        }

        .fixture-list .fixture-item:hover {
            background-color: var(--hover-bg);
            transform: translateY(-2px);
            box-shadow: var(--box-shadow);
        }

        .fixture-item.played {
            opacity: 0.9;
        }

        .fixture-item .match-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: var(--light-text-color);
            margin-bottom: 0.5rem;
        }

        .fixture-item .match-teams {
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .fixture-item .team-display {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .fixture-item .team-display.away {
            flex-direction: row-reverse;
        }

        .fixture-item .team-name {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .fixture-item .score {
            font-size: 1.2em;
            min-width: 2.5rem;
            text-align: center;
            color: var(--text-color);
        }

        .fixture-item .vs {
            color: var(--light-text-color);
            font-size: 0.9em;
            min-width: 1.5rem;
            text-align: center;
        }

        .fixture-item .status-badge {
            padding: 0.3rem 0.6rem;
            border-radius: 0.2rem;
            font-size: 0.7rem;
            font-weight: bold;
            text-transform: uppercase;
            margin-top: 0.5rem;
            align-self: flex-end;
        }

        .status-badge.scheduled { background-color: var(--info-color); color: white; }
        .status-badge.played { background-color: var(--success-color); color: white; }
        .status-badge.postponed { background-color: var(--warning-color); color: #333; }

        /* --- Group Stage Cards --- */
        .group-card {
            background-color: var(--card-bg);
            border-radius: 0.5rem;
            padding: 1.2rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 1rem;
        }

        .group-card h3 {
            margin-top: 0;
            margin-bottom: 1rem;
            color: var(--accent-color);
            font-size: 1.2rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.8rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .group-card h3::before {
            content: '🏆'; /* Placeholder icon */
            font-size: 1em;
        }

        .group-card .data-table {
            margin-bottom: 0;
        }

        /* --- Knockout Bracket --- */
        .knockout-bracket {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .knockout-rounds-wrapper {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            gap: 3rem; /* Space between rounds */
            padding: 1rem;
            min-width: max-content; /* Allow horizontal scroll */
        }

        .knockout-round {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            min-width: 200px; /* Minimum width for a round */
        }

        .knockout-round-title {
            font-size: 1.3rem;
            color: var(--accent-color);
            margin-bottom: 1.5rem;
            text-align: center;
            width: 100%;
            white-space: nowrap;
        }

        .knockout-matches {
            display: flex;
            flex-direction: column;
            gap: 1.5rem; /* Space between matches in a round */
            width: 100%;
        }

        .knockout-match-container {
            position: relative;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .knockout-match {
            background-color: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 0.8rem 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.3rem;
            width: 100%;
            max-width: 250px;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
            position: relative;
            z-index: 1;
            box-shadow: var(--card-shadow);
        }

        .knockout-match:hover {
            background-color: var(--hover-bg);
            transform: translateY(-2px);
            box-shadow: var(--box-shadow);
        }

        .knockout-match .team-line {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
            font-size: 0.95rem;
        }

        .knockout-match .team-name {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .knockout-match .score {
            min-width: 2rem;
            text-align: right;
            color: var(--text-color);
        }

        .knockout-match .aggregate-score {
            font-size: 0.75rem;
            color: var(--light-text-color);
            text-align: center;
            margin-top: 0.5rem;
            border-top: 1px dashed var(--border-color);
            padding-top: 0.5rem;
        }

        .knockout-match.winner {
            border-color: var(--accent-color);
            box-shadow: 0 0 8px var(--accent-color);
        }
        .knockout-match.winner .team-line {
            color: var(--accent-color);
        }

        /* Bracket lines (Champions League style) */
        .knockout-round:not(:last-child) .knockout-match-container {
            margin-bottom: 1.5rem; /* Space for vertical line */
        }
        .knockout-round:not(:last-child) .knockout-match-container::after {
            content: '';
            position: absolute;
            right: -1.5rem; /* Half of gap */
            top: 50%;
            transform: translateY(-50%);
            width: 1.5rem; /* Half of gap */
            height: 2px;
            background-color: var(--knockout-line-color);
            z-index: 0;
        }
        .knockout-round:not(:last-child) .knockout-match-container:nth-child(odd)::before {
            content: '';
            position: absolute;
            right: -1.5rem;
            top: 50%;
            width: 2px;
            height: calc(100% + 1.5rem); /* Connects to next match */
            background-color: var(--knockout-line-color);
            z-index: 0;
        }
        .knockout-round:not(:last-child) .knockout-match-container:nth-child(even)::before {
            content: '';
            position: absolute;
            right: -1.5rem;
            bottom: 50%;
            width: 2px;
            height: calc(100% + 1.5rem);
            background-color: var(--knockout-line-color);
            z-index: 0;
        }

        .knockout-match.winner + .bracket-arrow {
            opacity: 1;
        }

        /* World Cup specific bracket rendering (simplified for responsiveness) */
        .worldcup-bracket .knockout-rounds-wrapper {
            flex-direction: row; /* Keep horizontal flow */
            align-items: flex-start;
            gap: 3rem;
        }
        .worldcup-bracket .knockout-round {
            align-items: flex-start;
            min-width: 250px;
        }
        .worldcup-bracket .knockout-match-container {
            margin-bottom: 1rem;
            justify-content: flex-start;
        }
        .worldcup-bracket .knockout-match {
            max-width: none;
            width: 250px;
        }
        .worldcup-bracket .knockout-match-container::before,
        .worldcup-bracket .knockout-match-container::after {
            display: none; /* Hide default CL lines */
        }

        /* World Cup lines (simplified) */
        .worldcup-bracket .knockout-match-container {
            position: relative;
        }
        .worldcup-bracket .knockout-match-container:not(:last-child)::after {
            content: '';
            position: absolute;
            right: -1.5rem; /* Half of gap */
            top: 50%;
            transform: translateY(-50%);
            width: 1.5rem; /* Half of gap */
            height: 2px;
            background-color: var(--knockout-line-color);
            z-index: 0;
        }
        .worldcup-bracket .knockout-match-container:nth-child(odd):not(:last-child)::before {
            content: '';
            position: absolute;
            right: -1.5rem;
            top: 50%;
            width: 2px;
            height: calc(100% + 1rem); /* Connects to next match */
            background-color: var(--knockout-line-color);
            z-index: 0;
        }
        .worldcup-bracket .knockout-match-container:nth-child(even):not(:last-child)::before {
            content: '';
            position: absolute;
            right: -1.5rem;
            bottom: 50%;
            width: 2px;
            height: calc(100% + 1rem);
            background-color: var(--knockout-line-color);
            z-index: 0;
        }
        .worldcup-bracket .knockout-match.winner + .bracket-arrow {
            opacity: 1;
            position: absolute;
            right: -2.5rem; /* Position relative to match */
            top: 50%;
            transform: translateY(-50%);
            width: 0;
            height: 0;
            border-top: 6px solid transparent;
            border-bottom: 6px solid transparent;
            border-left: 6px solid var(--knockout-arrow-color);
            z-index: 2;
        }


        /* --- Modals --- */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background-color: var(--modal-bg);
            padding: 1.5rem;
            border-radius: 0.8rem;
            box-shadow: var(--modal-shadow);
            width: 90%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            transform: translateY(-2rem);
            transition: transform 0.3s ease;
        }

        .modal-overlay.active .modal-content {
            transform: translateY(0);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.8rem;
        }

        .modal-header h2 {
            margin: 0;
            color: var(--accent-color);
            font-size: 1.5rem;
        }

        .modal-close-btn {
            background: none;
            border: none;
            color: var(--light-text-color);
            font-size: 1.8rem;
            cursor: pointer;
            padding: 0.3rem;
            line-height: 1;
        }

        .modal-close-btn:hover {
            color: var(--text-color);
        }

        .modal-footer {
            margin-top: 1.5rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        /* Match Modal Specific */
        .match-modal-teams {
            display: flex;
            justify-content: space-around;
            align-items: center;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .match-modal-teams .team-name {
            font-weight: bold;
            color: var(--text-color);
            flex-basis: 40%;
            text-align: right;
        }
        .match-modal-teams .team-name:last-child {
            text-align: left;
        }

        .match-modal-teams .score-input {
            width: 3.5rem;
            text-align: center;
            font-size: 1.5rem;
            padding: 0.5rem;
            background-color: var(--hover-bg);
            border: 1px solid var(--border-color);
            border-radius: 0.3rem;
        }

        .match-events-section {
            margin-top: 1.5rem;
            border-top: 1px solid var(--border-color);
            padding-top: 1rem;
        }

        .match-events-list {
            list-style: none;
            padding: 0;
            margin: 0;
            max-height: 12rem;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            border-radius: 0.3rem;
            margin-bottom: 1rem;
            background-color: var(--input-bg);
        }

        .match-events-list li {
            padding: 0.6rem 0.8rem;
            border-bottom: 1px dashed var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
        }

        .match-events-list li:last-child {
            border-bottom: none;
        }

        .match-events-list li .event-details {
            flex-grow: 1;
        }

        .match-events-list li .event-actions button {
            background: none;
            border: none;
            color: var(--error-color);
            font-size: 1em;
            cursor: pointer;
            padding: 0.3rem;
        }

        .match-events-list li .event-actions button:hover {
            color: #ff7878;
        }

        .event-type-goal { color: var(--success-color); }
        .event-type-assist { color: var(--info-color); }
        .event-type-yellow { color: var(--warning-color); }
        .event-type-red { color: var(--error-color); }

        .player-select-group {
            display: flex;
            gap: 0.8rem;
            align-items: flex-end;
            margin-bottom: 1rem;
        }
        .player-select-group > div {
            flex-grow: 1;
        }

        /* Player Stats */
        .player-stats-leaderboard {
            margin-bottom: 1rem;
        }

        .player-stats-leaderboard h3 {
            color: var(--info-color);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .player-stats-leaderboard h3::before {
            content: '⭐'; /* Placeholder icon */
            font-size: 1em;
        }

        .player-stats-leaderboard .data-table th:first-child,
        .player-stats-leaderboard .data-table td:first-child {
            width: 2rem;
            text-align: center;
        }

        /* Floating Action Buttons (FABs) */
        .fab-container {
            position: fixed;
            bottom: 1.5rem;
            right: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 0.8rem;
            z-index: 900;
        }

        .fab-button {
            width: 3.5rem;
            height: 3.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            box-shadow: var(--fab-shadow);
            background-color: var(--fab-bg);
            color: var(--fab-text);
            transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
        }
        .fab-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.5);
        }
        .fab-button span {
            display: none; /* Text hidden by default */
            font-size: 0.9rem;
            margin-left: 0.5rem;
            white-space: nowrap;
        }
        .fab-button:hover span {
            display: inline; /* Show text on hover */
        }
        .fab-button.expanded {
            width: auto;
            padding: 0.8rem 1.2rem;
            border-radius: 2rem;
        }
        .fab-button.expanded span {
            display: inline;
        }

        /* Tooltips */
        [data-tooltip] {
            position: relative;
            cursor: help;
        }
        [data-tooltip]::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%) translateY(-0.5rem);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 0.5rem 0.8rem;
            border-radius: 0.3rem;
            font-size: 0.8rem;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.2s ease, transform 0.2s ease;
            z-index: 1001;
        }
        [data-tooltip]:hover::after {
            opacity: 1;
            visibility: visible;
            transform: translateX(-50%) translateY(-0.8rem);
        }

        /* --- Responsive Design --- */
        /* Mobile (Small phones, <480px) */
        @media (max-width: 480px) {
            body {
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr;
            }
            #header-bar {
                padding: 0.5rem 1rem;
            }
            .hamburger-menu {
                display: block;
            }
            #sidebar {
                position: fixed;
                top: 3.5rem; /* Below header */
                left: 0;
                width: 100%;
                height: calc(100vh - 3.5rem);
                transform: translateX(-100%);
                box-shadow: none;
                padding-top: 1rem;
            }
            #sidebar.active {
                transform: translateX(0);
            }
            #main-content {
                grid-column: 1;
                padding: 1rem;
            }
            #tournament-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.8rem;
            }
            #tournament-header h1 {
                font-size: 1.5rem;
            }
            #tournament-tabs {
                overflow-x: auto;
                white-space: nowrap;
                justify-content: initial;
                flex-wrap: nowrap;
            }
            .tab-button {
                flex-shrink: 0;
                padding: 0.6rem 0.8rem;
                font-size: 0.9rem;
            }
            .grid-2-col, .grid-3-col, .grid-4-col {
                grid-template-columns: 1fr;
            }
            .fixture-list {
                grid-template-columns: 1fr;
            }
            .fixture-item .match-teams {
                flex-direction: column;
                gap: 0.3rem;
            }
            .fixture-item .team-display {
                width: 100%;
                justify-content: space-between;
            }
            .fixture-item .team-display.away {
                flex-direction: row; /* Keep order for better readability on small screens */
            }
            .fixture-item .score {
                order: 2; /* Score after team name */
            }
            .fixture-item .vs {
                display: none; /* Hide 'vs' on very small screens */
            }
            .match-modal-teams {
                flex-direction: column;
                gap: 0.5rem;
            }
            .match-modal-teams .team-name {
                text-align: center;
                width: 100%;
            }
            .match-modal-teams .score-input {
                width: 4rem;
            }
            .player-select-group {
                flex-direction: column;
                align-items: stretch;
            }
            .fab-container {
                bottom: 1rem;
                right: 1rem;
            }
            .fab-button {
                width: 3rem;
                height: 3rem;
                font-size: 1.2rem;
            }
            .fab-button.expanded {
                padding: 0.6rem 1rem;
            }
            .knockout-rounds-wrapper {
                flex-direction: column;
                gap: 2rem;
                min-width: auto;
                width: 100%;
            }
            .knockout-round {
                min-width: auto;
                width: 100%;
            }
            .knockout-match {
                max-width: none;
            }
            .knockout-round:not(:last-child) .knockout-match-container::after,
            .knockout-round:not(:last-child) .knockout-match-container::before,
            .worldcup-bracket .knockout-match-container:not(:last-child)::after,
            .worldcup-bracket .knockout-match-container:nth-child(odd):not(:last-child)::before,
            .worldcup-bracket .knockout-match-container:nth-child(even):not(:last-child)::before,
            .worldcup-bracket .knockout-match.winner + .bracket-arrow {
                display: none; /* Hide complex bracket lines on small screens */
            }
        }

        /* Tablet (481px - 768px) */
        @media (min-width: 481px) and (max-width: 768px) {
            body {
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr;
            }
            .hamburger-menu {
                display: block;
            }
            #sidebar {
                position: fixed;
                top: 3.5rem;
                left: 0;
                width: 250px;
                height: calc(100vh - 3.5rem);
                transform: translateX(-100%);
                box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
            }
            #sidebar.active {
                transform: translateX(0);
            }
            #main-content {
                grid-column: 1;
                padding: 1.5rem;
            }
            #tournament-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            #tournament-tabs {
                overflow-x: auto;
                white-space: nowrap;
                justify-content: initial;
                flex-wrap: nowrap;
            }
            .grid-2-col, .grid-3-col, .grid-4-col {
                grid-template-columns: repeat(auto-fit, minmax(min(100%, 350px), 1fr));
            }
            .fixture-list {
                grid-template-columns: repeat(auto-fit, minmax(min(100%, 320px), 1fr));
            }
            .knockout-rounds-wrapper {
                gap: 2rem;
            }
        }

        /* Desktop (769px - 1439px) */
        @media (min-width: 769px) and (max-width: 1439px) {
            body {
                grid-template-columns: var(--sidebar-width) 1fr;
            }
            #header-bar {
                grid-column: 1 / -1;
            }
            #sidebar {
                grid-column: 1;
                grid-row: 2;
                transform: translateX(0); /* Always visible */
            }
            #main-content {
                grid-column: 2;
                grid-row: 2;
                padding: 2rem;
            }
            .hamburger-menu {
                display: none;
            }
            .grid-3-col {
                grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
            }
            .grid-4-col {
                grid-template-columns: repeat(auto-fit, minmax(min(100%, 250px), 1fr));
            }
            .knockout-rounds-wrapper {
                gap: 3rem;
            }
        }

        /* Ultrawide (>=1440px) */
        @media (min-width: 1440px) {
            body {
                grid-template-columns: var(--sidebar-width) 1fr;
            }
            #header-bar {
                grid-column: 1 / -1;
            }
            #sidebar {
                grid-column: 1;
                grid-row: 2;
                transform: translateX(0); /* Always visible */
            }
            #main-content {
                grid-column: 2;
                grid-row: 2;
                max-width: 1600px; /* Limit content width */
                margin: 0 auto;
                padding: 2rem 3rem;
            }
            .hamburger-menu {
                display: none;
            }
            .grid-3-col {
                grid-template-columns: repeat(3, 1fr);
            }
            .grid-4-col {
                grid-template-columns: repeat(4, 1fr);
            }
            .knockout-rounds-wrapper {
                gap: 4rem;
            }
        }
    </style>
</head>
<body class="dark-mode">
    <header id="header-bar">
        <button class="hamburger-menu" aria-label="Toggle navigation menu">☰</button>
        <div class="logo">⚽ Tournament <span>Manager</span></div>
        <button class="theme-toggle" aria-label="Toggle dark/light mode">💡</button>
    </header>

    <aside id="sidebar">
        <h2>Tournament Manager</h2>
        <nav>
            <ul>
                <li><a href="#" class="sidebar-item" data-view="home"><span role="img" aria-label="Home">🏠</span> Home</a></li>
                <li><a href="#" class="sidebar-item" data-view="create-tournament"><span role="img" aria-label="Create">✨</span> Create New Tournament</a></li>
            </ul>
            <div class="sidebar-section-title">Tournament Modes</div>
            <ul>
                <li><a href="#" class="sidebar-item" data-mode="league"><span role="img" aria-label="League">🏆</span> League</a></li>
                <li><a href="#" class="sidebar-item" data-mode="champions"><span role="img" aria-label="Champions League">⭐</span> Champions League</a></li>
                <li><a href="#" class="sidebar-item" data-mode="worldcup"><span role="img" aria-label="World Cup">🌍</span> World Cup</a></li>
            </ul>
            <div class="sidebar-section-title">Your Tournaments</div>
            <ul id="tournament-list" class="sidebar-tournament-list">
                <!-- Tournament items will be rendered here -->
            </ul>
            <div class="sidebar-section-title">Data Management</div>
            <ul>
                <li><a href="#" class="sidebar-item" id="export-data-btn"><span role="img" aria-label="Export">📤</span> Export All Data</a></li>
                <li><a href="#" class="sidebar-item" id="import-data-btn"><span role="img" aria-label="Import">📥</span> Import Data</a></li>
                <li><a href="#" class="sidebar-item" id="seed-demo-data-btn"><span role="img" aria-label="Seed">🌱</span> Seed Demo Data</a></li>
            </ul>
        </nav>
    </aside>

    <main id="main-content">
        <div id="home-view" class="tab-content active">
            <h1>Welcome to the Football Tournament Manager!</h1>
            <p>Select a tournament mode from the sidebar or create a new tournament to get started.</p>
            <div class="grid-3-col mt-2">
                <div class="card">
                    <h3>League Mode</h3>
                    <p>Manage a domestic league season with round-robin fixtures, standings, and player stats.</p>
                    <button onclick="app.ui.showCreateTournamentModal('league')">Create League</button>
                </div>
                <div class="card">
                    <h3>Champions League Mode</h3>
                    <p>Organize a group stage followed by a knockout bracket, inspired by European club competitions.</p>
                    <button onclick="app.ui.showCreateTournamentModal('champions')">Create Champions League</button>
                </div>
                <div class="card">
                    <h3>World Cup Mode</h3>
                    <p>Run a global tournament with group stages and a single-elimination knockout bracket.</p>
                    <button onclick="app.ui.showCreateTournamentModal('worldcup')">Create World Cup</button>
                </div>
            </div>
        </div>

        <div id="create-tournament-view" class="tab-content">
            <h1>Create New Tournament</h1>
            <div class="card">
                <div class="form-group">
                    <label for="new-tournament-name">Tournament Name:</label>
                    <input type="text" id="new-tournament-name" placeholder="e.g., Premier League 2024/25">
                </div>
                <div class="form-group">
                    <label for="new-tournament-mode">Tournament Mode:</label>
                    <select id="new-tournament-mode">
                        <option value="league">League (Season)</option>
                        <option value="champions">Champions League</option>
                        <option value="worldcup">World Cup</option>
                    </select>
                </div>
                <button id="create-tournament-btn">Create Tournament</button>
            </div>
        </div>

        <div id="tournament-view" class="tab-content">
            <div id="tournament-header">
                <h1 id="current-tournament-name"></h1>
                <div id="tournament-actions">
                    <!-- Actions like "Generate Fixtures" will go here -->
                </div>
            </div>

            <div id="tournament-tabs">
                <button class="tab-button active" data-tab="overview"><span role="img" aria-label="Overview">📊</span> Overview</button>
                <button class="tab-button" data-tab="fixtures"><span role="img" aria-label="Fixtures">🗓️</span> Fixtures</button>
                <button class="tab-button" data-tab="standings"><span role="img" aria-label="Standings">📈</span> Standings</button>
                <button class="tab-button" data-tab="player-stats"><span role="img" aria-label="Player Stats">👤</span> Player Stats</button>
                <button class="tab-button" data-tab="knockout"><span role="img" aria-label="Knockout">🥊</span> Knockout</button>
                <button class="tab-button" data-tab="manage"><span role="img" aria-label="Manage">⚙️</span> Manage</button>
            </div>

            <div id="overview-tab" class="tab-content active">
                <div class="card">
                    <h3>Tournament Summary</h3>
                    <p><strong>Mode:</strong> <span id="overview-mode"></span></p>
                    <p><strong>Teams:</strong> <span id="overview-num-teams"></span></p>
                    <p><strong>Matches Played:</strong> <span id="overview-matches-played"></span> / <span id="overview-total-matches"></span></p>
                    <p><strong>Status:</strong> <span id="overview-status"></span></p>
                </div>
                <div id="overview-next-fixtures" class="card">
                    <h3>Upcoming Fixtures</h3>
                    <div class="fixture-list single-column">
                        <!-- Next fixtures will be loaded here -->
                    </div>
                </div>
            </div>

            <div id="fixtures-tab" class="tab-content">
                <h2>Fixtures</h2>
                <div class="flex-row justify-between mb-1">
                    <div class="form-group" style="flex-grow: 1; margin-bottom: 0;">
                        <label for="fixture-team-filter">Filter by Team:</label>
                        <select id="fixture-team-filter">
                            <option value="">All Teams</option>
                        </select>
                    </div>
                    <button id="simulate-all-fixtures-btn" class="btn" data-tooltip="Simulate all remaining matches with random scores."><span role="img" aria-label="Simulate">🎲</span> Simulate All Remaining</button>
                </div>
                <div id="fixtures-list" class="fixture-list">
                    <!-- Fixtures will be loaded here -->
                </div>
            </div>

            <div id="standings-tab" class="tab-content">
                <h2>Standings</h2>
                <div id="standings-container">
                    <!-- Standings tables will be loaded here -->
                </div>
                <button id="export-standings-csv-btn" class="btn mt-1" data-tooltip="Download current standings as a CSV file."><span role="img" aria-label="Export CSV">📄</span> Export Standings as CSV</button>
            </div>

            <div id="player-stats-tab" class="tab-content">
                <h2>Player Statistics</h2>
                <div class="flex-row mb-1">
                    <div class="form-group" style="flex-grow: 1; margin-bottom: 0;">
                        <label for="player-stats-team-filter">Filter by Team:</label>
                        <select id="player-stats-team-filter">
                            <option value="">All Teams</option>
                        </select>
                    </div>
                </div>
                <div class="grid-2-col">
                    <div class="player-stats-leaderboard card">
                        <h3><span role="img" aria-label="Goals">⚽</span> Top Scorers</h3>
                        <div class="table-responsive">
                            <table class="data-table" id="top-scorers-table">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Player</th>
                                        <th>Team</th>
                                        <th class="text-right">Goals</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="player-stats-leaderboard card">
                        <h3><span role="img" aria-label="Assists">👟</span> Top Assists</h3>
                        <div class="table-responsive">
                            <table class="data-table" id="top-assists-table">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Player</th>
                                        <th>Team</th>
                                        <th class="text-right">Assists</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="player-stats-leaderboard card">
                        <h3><span role="img" aria-label="Yellow Card">🟨</span> Most Yellow Cards</h3>
                        <div class="table-responsive">
                            <table class="data-table" id="top-yellow-cards-table">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Player</th>
                                        <th>Team</th>
                                        <th class="text-right">Yellow</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="player-stats-leaderboard card">
                        <h3><span role="img" aria-label="Red Card">🟥</span> Most Red Cards</h3>
                        <div class="table-responsive">
                            <table class="data-table" id="top-red-cards-table">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Player</th>
                                        <th>Team</th>
                                        <th class="text-right">Red</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div id="knockout-tab" class="tab-content">
                <h2>Knockout Stage</h2>
                <div id="knockout-bracket-container">
                    <!-- Knockout bracket will be rendered here -->
                </div>
            </div>

            <div id="manage-tab" class="tab-content">
                <h2>Manage Tournament</h2>
                <div class="card mb-2">
                    <h3>Tournament Settings</h3>
                    <div id="tournament-settings-form">
                        <!-- Mode-specific settings will be loaded here -->
                    </div>
                    <button id="save-tournament-settings-btn" class="btn mt-1"><span role="img" aria-label="Save">💾</span> Save Settings</button>
                </div>

                <div class="card mb-2">
                    <h3>Teams</h3>
                    <div id="team-list-container" class="table-responsive">
                        <table class="data-table" id="manage-teams-table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Short Name</th>
                                    <th>Country</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Teams will be listed here -->
                            </tbody>
                        </table>
                    </div>
                    <button id="add-team-btn" class="btn mt-1"><span role="img" aria-label="Add Team">➕</span> Add Team</button>
                    <button id="draw-groups-btn" class="btn mt-1" style="display: none;" data-tooltip="Randomly assign teams to groups."><span role="img" aria-label="Draw Groups">🎲</span> Draw Groups</button>
                    <button id="generate-fixtures-btn" class="btn mt-1" style="display: none;" data-tooltip="Generate all matches for the tournament."><span role="img" aria-label="Generate Fixtures">🗓️</span> Generate Fixtures</button>
                </div>

                <div class="card">
                    <h3>Danger Zone</h3>
                    <button id="reset-tournament-btn" class="btn" style="background-color: var(--error-color);" data-tooltip="Permanently delete this tournament and all its data."><span role="img" aria-label="Reset">⚠️</span> Reset This Tournament</button>
                </div>
            </div>
        </div>
    </main>

    <!-- Floating Action Buttons -->
    <div class="fab-container">
        <button class="fab-button" id="fab-add-team" style="display: none;" data-tooltip="Add a new team"><span role="img" aria-label="Add Team">➕</span><span>Add Team</span></button>
        <button class="fab-button" id="fab-simulate-matchday" style="display: none;" data-tooltip="Simulate next matchday"><span role="img" aria-label="Simulate Matchday">⏩</span><span>Simulate Matchday</span></button>
        <button class="fab-button" id="fab-export-data" data-tooltip="Export all app data"><span role="img" aria-label="Export Data">📤</span><span>Export Data</span></button>
    </div>

    <!-- Modals -->
    <div id="match-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="match-modal-title">Match Details</h2>
                <button class="modal-close-btn" data-close-modal="match-modal" aria-label="Close match details modal">&times;</button>
            </div>
            <div class="modal-body">
                <p class="text-center" id="match-modal-date"></p>
                <div class="match-modal-teams">
                    <span id="match-modal-home-team" class="team-name"></span>
                    <input type="number" id="match-modal-home-score" class="score-input" min="0" value="0">
                    <span class="vs">-</span>
                    <input type="number" id="match-modal-away-score" class="score-input" min="0" value="0">
                    <span id="match-modal-away-team" class="team-name"></span>
                </div>
                <div class="flex-row justify-center mb-1">
                    <button id="match-modal-simulate-btn" class="btn" data-tooltip="Generate random scores for this match."><span role="img" aria-label="Simulate">🎲</span> Simulate Score</button>
                    <button id="match-modal-extra-time-btn" class="btn" style="display: none;"><span role="img" aria-label="Extra Time">⏱️</span> Add Extra Time</button>
                    <button id="match-modal-penalties-btn" class="btn" style="display: none;"><span role="img" aria-label="Penalties">🥅</span> Add Penalties</button>
                </div>

                <div id="match-modal-extra-time-section" style="display: none;">
                    <h4>Extra Time</h4>
                    <div class="match-modal-teams">
                        <span id="match-modal-home-team-et" class="team-name"></span>
                        <input type="number" id="match-modal-home-score-et" class="score-input" min="0" value="0">
                        <span class="vs">-</span>
                        <input type="number" id="match-modal-away-score-et" class="score-input" min="0" value="0">
                        <span id="match-modal-away-team-et" class="team-name"></span>
                    </div>
                </div>

                <div id="match-modal-penalties-section" style="display: none;">
                    <h4>Penalties</h4>
                    <div class="match-modal-teams">
                        <span id="match-modal-home-team-pen" class="team-name"></span>
                        <input type="number" id="match-modal-home-score-pen" class="score-input" min="0" value="0">
                        <span class="vs">-</span>
                        <input type="number" id="match-modal-away-score-pen" class="score-input" min="0" value="0">
                        <span id="match-modal-away-team-pen" class="team-name"></span>
                    </div>
                </div>

                <div class="match-events-section">
                    <h4>Match Events</h4>
                    <ul id="match-modal-events-list" class="match-events-list">
                        <!-- Events will be listed here -->
                    </ul>
                    <div class="flex-row gap-1">
                        <div class="form-group" style="flex-grow: 1;">
                            <label for="event-type">Event Type:</label>
                            <select id="event-type">
                                <option value="goal">Goal</option>
                                <option value="assist">Assist</option>
                                <option value="yellow">Yellow Card</option>
                                <option value="red">Red Card</option>
                            </select>
                        </div>
                        <div class="form-group" style="flex-grow: 1;">
                            <label for="event-minute">Minute:</label>
                            <input type="number" id="event-minute" min="1" value="1">
                        </div>
                    </div>
                    <div class="player-select-group">
                        <div class="form-group">
                            <label for="event-player-team">Team:</label>
                            <select id="event-player-team">
                                <!-- Teams will be loaded here -->
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="event-player">Player:</label>
                            <select id="event-player">
                                <!-- Players will be loaded here -->
                            </select>
                        </div>
                        <div class="form-group" id="event-assist-player-group">
                            <label for="event-assist-player">Assisted By:</label>
                            <select id="event-assist-player">
                                <option value="">None</option>
                                <!-- Players will be loaded here -->
                            </select>
                        </div>
                    </div>
                    <button id="add-event-btn" class="btn"><span role="img" aria-label="Add Event">➕</span> Add Event</button>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn" data-close-modal="match-modal">Cancel</button>
                <button id="match-modal-save-btn" class="btn"><span role="img" aria-label="Save">💾</span> Save Result</button>
            </div>
        </div>
    </div>

    <div id="team-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="team-modal-title">Add/Edit Team</h2>
                <button class="modal-close-btn" data-close-modal="team-modal" aria-label="Close team modal">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="team-modal-id">
                <div class="form-group">
                    <label for="team-name">Team Name:</label>
                    <input type="text" id="team-name" required>
                </div>
                <div class="form-group">
                    <label for="team-short-name">Short Name (e.g., MUN):</label>
                    <input type="text" id="team-short-name" maxlength="3">
                </div>
                <div class="form-group">
                    <label for="team-country">Country:</label>
                    <input type="text" id="team-country">
                </div>
                <div class="form-group">
                    <label for="team-primary-color">Primary Color:</label>
                    <input type="color" id="team-primary-color" value="#005792">
                </div>
                <div class="form-group">
                    <label for="team-secondary-color">Secondary Color:</label>
                    <input type="color" id="team-secondary-color" value="#FFFFFF">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn" data-close-modal="team-modal">Cancel</button>
                <button id="team-modal-save-btn" class="btn"><span role="img" aria-label="Save">💾</span> Save Team</button>
            </div>
        </div>
    </div>

    <div id="player-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="player-modal-title">Manage Players for <span id="player-modal-team-name"></span></h2>
                <button class="modal-close-btn" data-close-modal="player-modal" aria-label="Close player modal">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="player-modal-team-id">
                <h3>Current Players</h3>
                <div class="table-responsive">
                    <table class="data-table" id="manage-players-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Players will be listed here -->
                        </tbody>
                    </table>
                </div>
                <h3 class="mt-1">Add New Player</h3>
                <input type="hidden" id="edit-player-id">
                <div class="form-group">
                    <label for="player-name">Player Name:</label>
                    <input type="text" id="player-name" required>
                </div>
                <div class="form-group">
                    <label for="player-number">Shirt Number:</label>
                    <input type="number" id="player-number" min="1" max="99">
                </div>
                <div class="form-group">
                    <label for="player-position">Position:</label>
                    <input type="text" id="player-position" placeholder="e.g., FW, MF, DF, GK">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn" data-close-modal="player-modal">Done</button>
                <button id="player-modal-add-edit-btn" class="btn"><span role="img" aria-label="Add Player">➕</span> Add Player</button>
            </div>
        </div>
    </div>

    <input type="file" id="import-file-input" accept=".json" style="display: none;">

    <script>
        const app = {}; // Global application object

        // --- Data Management ---
        app.data = {
            localStorageKey: 'football_manager_v1',
            themeKey: 'football_manager_v1_theme',
            state: {
                tournaments: [],
                teams: {}, // { teamId: { id, name, ... }, ... }
                players: {}, // { teamId: [{ id, name, ... }], ... }
                fixtures: {}, // { tournamentId: [{ id, date, ... }], ... }
                standings: {}, // { tournamentId: { groupId: [{ teamId, P, W, ... }] }, ... }
                knockout: {}, // { tournamentId: { rounds: [...] }, ... }
            },
            currentTournamentId: null,
            uniqueIdCounter: 0,
            darkModeEnabled: true, // Default to dark mode

            generateUniqueId() {
                return `id_${Date.now()}_${app.data.uniqueIdCounter++}`;
            },

            saveState() {
                localStorage.setItem(app.data.localStorageKey, JSON.stringify(app.data.state));
                console.log('State saved to localStorage.');
            },

            loadState() {
                const savedState = localStorage.getItem(app.data.localStorageKey);
                if (savedState) {
                    app.data.state = JSON.parse(savedState);
                    // Re-initialize uniqueIdCounter to avoid collisions
                    let maxIdNum = 0;
                    const allIds = [
                        ...app.data.state.tournaments.map(t => t.id),
                        ...Object.keys(app.data.state.teams),
                        ...Object.values(app.data.state.players).flat().map(p => p.id),
                        ...Object.values(app.data.state.fixtures).flat().map(f => f.id)
                    ];
                    allIds.forEach(id => {
                        const match = id.match(/_(\d+)_(\d+)$/);
                        if (match) {
                            maxIdNum = Math.max(maxIdNum, parseInt(match[1]), parseInt(match[2]));
                        }
                    });
                    app.data.uniqueIdCounter = maxIdNum + 1;
                    console.log('State loaded from localStorage.');
                    return true;
                }
                console.log('No state found in localStorage.');
                return false;
            },

            saveThemePreference() {
                localStorage.setItem(app.data.themeKey, JSON.stringify({ darkModeEnabled: app.data.darkModeEnabled }));
            },

            loadThemePreference() {
                const savedTheme = localStorage.getItem(app.data.themeKey);
                if (savedTheme) {
                    const themeData = JSON.parse(savedTheme);
                    app.data.darkModeEnabled = themeData.darkModeEnabled;
                }
            },

            resetTournament(tournamentId) {
                const tournamentIndex = app.data.state.tournaments.findIndex(t => t.id === tournamentId);
                if (tournamentIndex !== -1) {
                    const tournament = app.data.state.tournaments[tournamentIndex];
                    // Remove associated fixtures, standings, knockout, and players
                    delete app.data.state.fixtures[tournamentId];
                    delete app.data.state.standings[tournamentId];
                    delete app.data.state.knockout[tournamentId];
                    // Remove players for teams in this tournament
                    tournament.teams.forEach(teamId => {
                        delete app.data.state.players[teamId];
                    });
                    // Remove teams themselves
                    tournament.teams.forEach(teamId => {
                        delete app.data.state.teams[teamId];
                    });
                    // Remove the tournament itself
                    app.data.state.tournaments.splice(tournamentIndex, 1);

                    app.data.saveState();
                    app.ui.renderSidebar();
                    app.ui.showHomeView();
                    alert(`Tournament "${tournament.name}" has been reset and removed.`);
                }
            },

            exportState() {
                const dataStr = JSON.stringify(app.data.state, null, 2);
                const blob = new Blob([dataStr], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `football_manager_data_${new Date().toISOString().slice(0, 10)}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            },

            importState(jsonString) {
                try {
                    const importedState = JSON.parse(jsonString);
                    // Basic validation
                    if (importedState && Array.isArray(importedState.tournaments) && typeof importedState.teams === 'object') {
                        app.data.state = importedState;
                        app.data.saveState();
                        app.ui.renderSidebar();
                        app.ui.showHomeView();
                        alert('Data imported successfully!');
                    } else {
                        throw new Error('Invalid data structure.');
                    }
                } catch (e) {
                    alert('Failed to import data: ' + e.message);
                    console.error('Import error:', e);
                }
            },

            // --- Tournament Data Accessors ---
            getTournament(id) {
                return app.data.state.tournaments.find(t => t.id === id);
            },
            getTeamsInTournament(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return [];
                return tournament.teams.map(teamId => app.data.state.teams[teamId]).filter(Boolean);
            },
            getTeam(teamId) {
                return app.data.state.teams[teamId];
            },
            getPlayersInTeam(teamId) {
                return app.data.state.players[teamId] || [];
            },
            getPlayer(teamId, playerId) {
                return (app.data.state.players[teamId] || []).find(p => p.id === playerId);
            },
            getFixtures(tournamentId) {
                return app.data.state.fixtures[tournamentId] || [];
            },
            getFixture(tournamentId, fixtureId) {
                return (app.data.state.fixtures[tournamentId] || []).find(f => f.id === fixtureId);
            },
            getStandings(tournamentId, groupId = null) {
                if (!app.data.state.standings[tournamentId]) return [];
                if (groupId) {
                    return app.data.state.standings[tournamentId][groupId] || [];
                }
                // For league mode, there's no group, so return the main standings array
                return app.data.state.standings[tournamentId].main || [];
            },
            getKnockout(tournamentId) {
                return app.data.state.knockout[tournamentId];
            }
        };

        // --- UI Management ---
        app.ui = {
            elements: {
                body: document.body,
                headerBar: document.getElementById('header-bar'),
                hamburgerMenu: document.querySelector('.hamburger-menu'),
                themeToggle: document.querySelector('.theme-toggle'),
                sidebar: document.getElementById('sidebar'),
                mainContent: document.getElementById('main-content'),
                tournamentList: document.getElementById('tournament-list'),
                homeView: document.getElementById('home-view'),
                createTournamentView: document.getElementById('create-tournament-view'),
                tournamentView: document.getElementById('tournament-view'),
                currentTournamentName: document.getElementById('current-tournament-name'),
                tournamentActions: document.getElementById('tournament-actions'),
                tournamentTabs: document.getElementById('tournament-tabs'),
                overviewTab: document.getElementById('overview-tab'),
                fixturesTab: document.getElementById('fixtures-tab'),
                standingsTab: document.getElementById('standings-tab'),
                playerStatsTab: document.getElementById('player-stats-tab'),
                knockoutTab: document.getElementById('knockout-tab'),
                manageTab: document.getElementById('manage-tab'),

                // Create Tournament
                newTournamentName: document.getElementById('new-tournament-name'),
                newTournamentMode: document.getElementById('new-tournament-mode'),
                createTournamentBtn: document.getElementById('create-tournament-btn'),

                // Overview
                overviewMode: document.getElementById('overview-mode'),
                overviewNumTeams: document.getElementById('overview-num-teams'),
                overviewMatchesPlayed: document.getElementById('overview-matches-played'),
                overviewTotalMatches: document.getElementById('overview-total-matches'),
                overviewStatus: document.getElementById('overview-status'),
                overviewNextFixtures: document.querySelector('#overview-next-fixtures .fixture-list'),

                // Fixtures
                fixtureTeamFilter: document.getElementById('fixture-team-filter'),
                fixturesList: document.getElementById('fixtures-list'),
                simulateAllFixturesBtn: document.getElementById('simulate-all-fixtures-btn'),

                // Standings
                standingsContainer: document.getElementById('standings-container'),
                exportStandingsCsvBtn: document.getElementById('export-standings-csv-btn'),

                // Player Stats
                playerStatsTeamFilter: document.getElementById('player-stats-team-filter'),
                topScorersTable: document.getElementById('top-scorers-table').querySelector('tbody'),
                topAssistsTable: document.getElementById('top-assists-table').querySelector('tbody'),
                topYellowCardsTable: document.getElementById('top-yellow-cards-table').querySelector('tbody'),
                topRedCardsTable: document.getElementById('top-red-cards-table').querySelector('tbody'),

                // Knockout
                knockoutBracketContainer: document.getElementById('knockout-bracket-container'),

                // Manage
                tournamentSettingsForm: document.getElementById('tournament-settings-form'),
                saveTournamentSettingsBtn: document.getElementById('save-tournament-settings-btn'),
                manageTeamsTable: document.getElementById('manage-teams-table').querySelector('tbody'),
                addTeamBtn: document.getElementById('add-team-btn'),
                drawGroupsBtn: document.getElementById('draw-groups-btn'),
                generateFixturesBtn: document.getElementById('generate-fixtures-btn'),
                resetTournamentBtn: document.getElementById('reset-tournament-btn'),

                // Modals
                matchModal: document.getElementById('match-modal'),
                matchModalTitle: document.getElementById('match-modal-title'),
                matchModalDate: document.getElementById('match-modal-date'),
                matchModalHomeTeam: document.getElementById('match-modal-home-team'),
                matchModalHomeScore: document.getElementById('match-modal-home-score'),
                matchModalAwayScore: document.getElementById('match-modal-away-score'),
                matchModalAwayTeam: document.getElementById('match-modal-away-team'),
                matchModalSimulateBtn: document.getElementById('match-modal-simulate-btn'),
                matchModalExtraTimeBtn: document.getElementById('match-modal-extra-time-btn'),
                matchModalPenaltiesBtn: document.getElementById('match-modal-penalties-btn'),
                matchModalExtraTimeSection: document.getElementById('match-modal-extra-time-section'),
                matchModalHomeScoreET: document.getElementById('match-modal-home-score-et'),
                matchModalAwayScoreET: document.getElementById('match-modal-away-score-et'),
                matchModalPenaltiesSection: document.getElementById('match-modal-penalties-section'),
                matchModalHomeScorePen: document.getElementById('match-modal-home-score-pen'),
                matchModalAwayScorePen: document.getElementById('match-modal-away-score-pen'),
                matchModalEventsList: document.getElementById('match-modal-events-list'),
                eventType: document.getElementById('event-type'),
                eventMinute: document.getElementById('event-minute'),
                eventPlayerTeam: document.getElementById('event-player-team'),
                eventPlayer: document.getElementById('event-player'),
                eventAssistPlayerGroup: document.getElementById('event-assist-player-group'),
                eventAssistPlayer: document.getElementById('event-assist-player'),
                addEventBtn: document.getElementById('add-event-btn'),
                matchModalSaveBtn: document.getElementById('match-modal-save-btn'),

                teamModal: document.getElementById('team-modal'),
                teamModalTitle: document.getElementById('team-modal-title'),
                teamModalId: document.getElementById('team-modal-id'),
                teamName: document.getElementById('team-name'),
                teamShortName: document.getElementById('team-short-name'),
                teamCountry: document.getElementById('team-country'),
                teamPrimaryColor: document.getElementById('team-primary-color'),
                teamSecondaryColor: document.getElementById('team-secondary-color'),
                teamModalSaveBtn: document.getElementById('team-modal-save-btn'),

                playerModal: document.getElementById('player-modal'),
                playerModalTeamName: document.getElementById('player-modal-team-name'),
                playerModalTeamId: document.getElementById('player-modal-team-id'),
                managePlayersTable: document.getElementById('manage-players-table').querySelector('tbody'),
                editPlayerId: document.getElementById('edit-player-id'),
                playerName: document.getElementById('player-name'),
                playerNumber: document.getElementById('player-number'),
                playerPosition: document.getElementById('player-position'),
                playerModalAddEditBtn: document.getElementById('player-modal-add-edit-btn'),

                importFileInput: document.getElementById('import-file-input'),
                exportDataBtn: document.getElementById('export-data-btn'),
                importDataBtn: document.getElementById('import-data-btn'),
                seedDemoDataBtn: document.getElementById('seed-demo-data-btn'),

                // FABs
                fabAddTeam: document.getElementById('fab-add-team'),
                fabSimulateMatchday: document.getElementById('fab-simulate-matchday'),
                fabExportData: document.getElementById('fab-export-data'),
            },
            currentActiveTab: 'overview',
            currentMatchFixtureId: null, // Used for match modal context
            currentTeamIdForPlayers: null, // Used for player modal context

            init() {
                this.bindGlobalEventListeners();
                this.applyDarkModePreference();
            },

            bindGlobalEventListeners() {
                // Hamburger menu toggle
                this.elements.hamburgerMenu.addEventListener('click', () => this.toggleSidebar());

                // Theme toggle
                this.elements.themeToggle.addEventListener('click', () => this.toggleDarkMode());

                // Sidebar navigation
                this.elements.sidebar.addEventListener('click', (e) => {
                    const target = e.target.closest('.sidebar-item');
                    if (!target) return;

                    // Close sidebar on mobile after selection
                    if (window.innerWidth <= 768) {
                        this.toggleSidebar(false);
                    }

                    // Remove active class from all sidebar items
                    document.querySelectorAll('.sidebar-item').forEach(item => item.classList.remove('active'));
                    target.classList.add('active');

                    if (target.dataset.view === 'home') {
                        this.showHomeView();
                    } else if (target.dataset.view === 'create-tournament') {
                        this.showCreateTournamentModal();
                    } else if (target.dataset.mode) {
                        this.showCreateTournamentModal(target.dataset.mode);
                    } else if (target.dataset.tournamentId) {
                        app.data.currentTournamentId = target.dataset.tournamentId;
                        this.showTournamentView();
                    } else if (target.id === 'export-data-btn') {
                        app.data.exportState();
                    } else if (target.id === 'import-data-btn') {
                        this.elements.importFileInput.click();
                    } else if (target.id === 'seed-demo-data-btn') {
                        app.logic.seedDemoData();
                        this.renderSidebar();
                        this.showHomeView();
                    }
                });

                // Tournament tabs
                this.elements.tournamentTabs.addEventListener('click', (e) => {
                    const target = e.target.closest('.tab-button');
                    if (!target) return;

                    document.querySelectorAll('#tournament-tabs .tab-button').forEach(btn => btn.classList.remove('active'));
                    target.classList.add('active');

                    document.querySelectorAll('#tournament-view .tab-content').forEach(content => content.classList.remove('active'));
                    const tabId = target.dataset.tab;
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                    this.currentActiveTab = tabId;
                    this.renderCurrentTournamentView(); // Re-render content for the active tab
                });

                // Create Tournament button
                this.elements.createTournamentBtn.addEventListener('click', () => {
                    const name = this.elements.newTournamentName.value.trim();
                    const mode = this.elements.newTournamentMode.value;
                    if (name) {
                        app.logic.createTournament(name, mode);
                        this.elements.newTournamentName.value = '';
                        this.renderSidebar();
                        this.showTournamentView(app.data.state.tournaments[app.data.state.tournaments.length - 1].id);
                    } else {
                        alert('Please enter a tournament name.');
                    }
                });

                // Match Modal close buttons
                document.querySelectorAll('.modal-close-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        const modalId = e.target.dataset.closeModal;
                        document.getElementById(modalId).classList.remove('active');
                    });
                });
                document.querySelectorAll('.modal-overlay').forEach(overlay => {
                    overlay.addEventListener('click', (e) => {
                        if (e.target === overlay) {
                            overlay.classList.remove('active');
                        }
                    });
                });

                // Match Modal event listeners
                this.elements.matchModalSimulateBtn.addEventListener('click', () => this.simulateMatchInModal());
                this.elements.matchModalExtraTimeBtn.addEventListener('click', () => this.toggleExtraTimeInput(true));
                this.elements.matchModalPenaltiesBtn.addEventListener('click', () => this.togglePenaltiesInput(true));
                this.elements.eventPlayerTeam.addEventListener('change', () => this.populatePlayerSelect(this.elements.eventPlayerTeam.value, this.elements.eventPlayer));
                this.elements.eventType.addEventListener('change', () => {
                    this.elements.eventAssistPlayerGroup.style.display = (this.elements.eventType.value === 'goal') ? 'flex' : 'none';
                });
                this.elements.addEventBtn.addEventListener('click', () => this.addEventToMatchModal());
                this.elements.matchModalSaveBtn.addEventListener('click', () => this.saveMatchResultFromModal());

                // Team Modal event listeners
                this.elements.teamModalSaveBtn.addEventListener('click', () => this.saveTeamFromModal());

                // Player Modal event listeners
                this.elements.playerModalAddEditBtn.addEventListener('click', () => this.addEditPlayerFromModal());

                // Import file input
                this.elements.importFileInput.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                            app.data.importState(event.target.result);
                        };
                        reader.readAsText(file);
                    }
                });

                // Manage tab buttons
                this.elements.addTeamBtn.addEventListener('click', () => this.showTeamModal());
                this.elements.drawGroupsBtn.addEventListener('click', () => this.drawGroups());
                this.elements.generateFixturesBtn.addEventListener('click', () => this.generateFixtures());
                this.elements.resetTournamentBtn.addEventListener('click', () => {
                    if (confirm('Are you sure you want to reset this tournament? All data for this tournament will be lost.')) {
                        app.data.resetTournament(app.data.currentTournamentId);
                    }
                });
                this.elements.saveTournamentSettingsBtn.addEventListener('click', () => this.saveTournamentSettings());

                // Fixtures tab filter
                this.elements.fixtureTeamFilter.addEventListener('change', () => this.renderFixtures());

                // Player stats filter
                this.elements.playerStatsTeamFilter.addEventListener('change', () => this.renderPlayerStats());

                // Export standings CSV
                this.elements.exportStandingsCsvBtn.addEventListener('click', () => app.logic.exportStandingsAsCsv(app.data.currentTournamentId));

                // FABs
                this.elements.fabAddTeam.addEventListener('click', () => this.showTeamModal());
                this.elements.fabSimulateMatchday.addEventListener('click', () => {
                    if (confirm('Are you sure you want to simulate all remaining fixtures for the current tournament? This cannot be undone.')) {
                        app.logic.simulateAllRemainingFixtures(app.data.currentTournamentId);
                        this.renderCurrentTournamentView();
                    }
                });
                this.elements.fabExportData.addEventListener('click', () => app.data.exportState());
            },

            toggleSidebar(forceState = null) {
                const isActive = this.elements.sidebar.classList.contains('active');
                if (forceState === true) {
                    this.elements.sidebar.classList.add('active');
                } else if (forceState === false) {
                    this.elements.sidebar.classList.remove('active');
                } else {
                    this.elements.sidebar.classList.toggle('active');
                }
            },

            toggleDarkMode() {
                app.data.darkModeEnabled = !app.data.darkModeEnabled;
                this.applyDarkModePreference();
                app.data.saveThemePreference();
            },

            applyDarkModePreference() {
                if (app.data.darkModeEnabled) {
                    document.documentElement.classList.add('dark-mode');
                    document.documentElement.classList.remove('light-mode');
                    this.elements.themeToggle.textContent = '💡'; // Lightbulb icon
                } else {
                    document.documentElement.classList.remove('dark-mode');
                    document.documentElement.classList.add('light-mode');
                    this.elements.themeToggle.textContent = '🌙'; // Moon icon
                }
                // Re-apply tournament theme to ensure correct accent colors
                if (app.data.currentTournamentId) {
                    const tournament = app.data.getTournament(app.data.currentTournamentId);
                    if (tournament) {
                        this.applyTournamentTheme(tournament.mode);
                    }
                }
            },

            applyTournamentTheme(mode) {
                document.documentElement.classList.remove('league-theme', 'champions-theme', 'worldcup-theme');
                document.documentElement.classList.add(`${mode}-theme`);
            },

            showModal(modalId) {
                document.getElementById(modalId).classList.add('active');
            },

            hideModal(modalId) {
                document.getElementById(modalId).classList.remove('active');
            },

            showHomeView() {
                document.querySelectorAll('#main-content .tab-content').forEach(view => view.classList.remove('active'));
                this.elements.homeView.classList.add('active');
                app.data.currentTournamentId = null;
                document.querySelectorAll('.sidebar-item').forEach(item => item.classList.remove('active'));
                document.querySelector('[data-view="home"]').classList.add('active');
                this.applyTournamentTheme('default'); // Reset to default theme
                this.updateFabVisibility();
            },

            showCreateTournamentModal(mode = 'league') {
                document.querySelectorAll('#main-content .tab-content').forEach(view => view.classList.remove('active'));
                this.elements.createTournamentView.classList.add('active');
                this.elements.newTournamentMode.value = mode;
                app.data.currentTournamentId = null;
                document.querySelectorAll('.sidebar-item').forEach(item => item.classList.remove('active'));
                document.querySelector('[data-view="create-tournament"]').classList.add('active');
                this.applyTournamentTheme('default'); // Reset to default theme
                this.updateFabVisibility();
            },

            showTournamentView(tournamentId = app.data.currentTournamentId) {
                if (!tournamentId) {
                    this.showHomeView();
                    return;
                }
                app.data.currentTournamentId = tournamentId;
                document.querySelectorAll('#main-content .tab-content').forEach(view => view.classList.remove('active'));
                this.elements.tournamentView.classList.add('active');

                // Update sidebar active state
                document.querySelectorAll('.sidebar-item').forEach(item => item.classList.remove('active'));
                const activeSidebarItem = document.querySelector(`.sidebar-item[data-tournament-id="${tournamentId}"]`);
                if (activeSidebarItem) {
                    activeSidebarItem.classList.add('active');
                }

                // Activate the last active tab or default to overview
                document.querySelectorAll('#tournament-tabs .tab-button').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('#tournament-view .tab-content').forEach(content => content.classList.remove('active'));

                const activeTabButton = document.querySelector(`#tournament-tabs .tab-button[data-tab="${this.currentActiveTab}"]`);
                if (activeTabButton) {
                    activeTabButton.classList.add('active');
                    document.getElementById(`${this.currentActiveTab}-tab`).classList.add('active');
                } else {
                    this.currentActiveTab = 'overview';
                    document.querySelector('#tournament-tabs .tab-button[data-tab="overview"]').classList.add('active');
                    document.getElementById('overview-tab').classList.add('active');
                }

                const tournament = app.data.getTournament(tournamentId);
                if (tournament) {
                    this.applyTournamentTheme(tournament.mode);
                }
                this.renderCurrentTournamentView();
                this.updateFabVisibility();
            },

            renderSidebar() {
                const tournamentList = this.elements.tournamentList;
                tournamentList.innerHTML = '';

                const modes = {
                    'league': 'League',
                    'champions': 'Champions League',
                    'worldcup': 'World Cup',
                    'default': 'Default' // For home/create views
                };

                app.data.state.tournaments.forEach(tournament => {
                    const li = document.createElement('li');
                    const a = document.createElement('a');
                    a.href = '#';
                    a.classList.add('sidebar-item');
                    a.dataset.tournamentId = tournament.id;
                    a.innerHTML = `<span role="img" aria-label="${modes[tournament.mode]}">${this.getModeIcon(tournament.mode)}</span> ${tournament.name}`;
                    if (app.data.currentTournamentId === tournament.id) {
                        a.classList.add('active');
                    }
                    li.appendChild(a);
                    tournamentList.appendChild(li);
                });
            },

            getModeIcon(mode) {
                switch (mode) {
                    case 'league': return '🏆';
                    case 'champions': return '⭐';
                    case 'worldcup': return '🌍';
                    default: return '⚽';
                }
            },

            renderCurrentTournamentView() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) {
                    this.showHomeView();
                    return;
                }

                this.elements.currentTournamentName.innerHTML = `${this.getModeIcon(tournament.mode)} ${tournament.name}`;
                this.renderTournamentActions(tournament);

                // Show/hide knockout tab based on mode
                this.elements.knockoutTab.style.display = (tournament.mode === 'champions' || tournament.mode === 'worldcup') ? 'flex' : 'none';

                switch (this.currentActiveTab) {
                    case 'overview': this.renderOverview(); break;
                    case 'fixtures': this.renderFixtures(); break;
                    case 'standings': this.renderStandings(); break;
                    case 'player-stats': this.renderPlayerStats(); break;
                    case 'knockout': this.renderKnockoutBracket(); break;
                    case 'manage': this.renderManageSection(); break;
                }
                this.updateFabVisibility();
            },

            renderTournamentActions(tournament) {
                const actionsDiv = this.elements.tournamentActions;
                actionsDiv.innerHTML = '';

                const teams = app.data.getTeamsInTournament(tournament.id);
                const fixtures = app.data.getFixtures(tournament.id);

                if (tournament.mode === 'league') {
                    if (teams.length >= 2 && fixtures.length === 0) {
                        const btn = document.createElement('button');
                        btn.classList.add('btn');
                        btn.innerHTML = '<span role="img" aria-label="Generate Fixtures">🗓️</span> Generate Fixtures';
                        btn.addEventListener('click', () => this.generateFixtures());
                        actionsDiv.appendChild(btn);
                    }
                } else { // Champions League & World Cup
                    if (teams.length >= tournament.config.numGroups * tournament.config.groupSize && !tournament.groups) {
                        const btn = document.createElement('button');
                        btn.classList.add('btn');
                        btn.innerHTML = '<span role="img" aria-label="Draw Groups">🎲</span> Draw Groups';
                        btn.addEventListener('click', () => this.drawGroups());
                        actionsDiv.appendChild(btn);
                    } else if (tournament.groups && fixtures.length === 0) {
                        const btn = document.createElement('button');
                        btn.classList.add('btn');
                        btn.innerHTML = '<span role="img" aria-label="Generate Fixtures">🗓️</span> Generate Fixtures';
                        btn.addEventListener('click', () => this.generateFixtures());
                        actionsDiv.appendChild(btn);
                    }
                }
            },

            renderOverview() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                const teams = app.data.getTeamsInTournament(tournament.id);
                const fixtures = app.data.getFixtures(tournament.id);
                const playedFixtures = fixtures.filter(f => f.status === 'played');

                this.elements.overviewMode.textContent = tournament.mode.replace(/\b\w/g, char => char.toUpperCase());
                this.elements.overviewNumTeams.textContent = teams.length;
                this.elements.overviewMatchesPlayed.textContent = playedFixtures.length;
                this.elements.overviewTotalMatches.textContent = fixtures.length;
                this.elements.overviewStatus.textContent = fixtures.length === 0 ? 'Setup Required' :
                                                            (playedFixtures.length === fixtures.length ? 'Completed' : 'In Progress');

                // Render next 5 scheduled fixtures
                const nextFixtures = fixtures
                    .filter(f => f.status === 'scheduled')
                    .sort((a, b) => new Date(a.date) - new Date(b.date))
                    .slice(0, 5);

                this.elements.overviewNextFixtures.innerHTML = '';
                if (nextFixtures.length === 0) {
                    this.elements.overviewNextFixtures.innerHTML = '<p class="text-center">No upcoming fixtures.</p>';
                } else {
                    nextFixtures.forEach(fixture => {
                        this.elements.overviewNextFixtures.appendChild(this.createFixtureItem(fixture));
                    });
                }
            },

            renderFixtures() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                const fixtures = app.data.getFixtures(tournament.id);
                const teams = app.data.getTeamsInTournament(tournament.id);

                // Populate team filter
                this.elements.fixtureTeamFilter.innerHTML = '<option value="">All Teams</option>';
                teams.forEach(team => {
                    const option = document.createElement('option');
                    option.value = team.id;
                    option.textContent = team.name;
                    this.elements.fixtureTeamFilter.appendChild(option);
                });
                this.elements.fixtureTeamFilter.value = this.elements.fixtureTeamFilter.value || ''; // Keep selected value

                const filterTeamId = this.elements.fixtureTeamFilter.value;
                const filteredFixtures = filterTeamId
                    ? fixtures.filter(f => f.homeTeamId === filterTeamId || f.awayTeamId === filterTeamId)
                    : fixtures;

                // Sort fixtures by date
                filteredFixtures.sort((a, b) => new Date(a.date) - new Date(b.date));

                this.elements.fixturesList.innerHTML = '';
                if (filteredFixtures.length === 0) {
                    this.elements.fixturesList.innerHTML = '<p class="text-center">No fixtures generated yet.</p>';
                    this.elements.simulateAllFixturesBtn.disabled = true;
                } else {
                    filteredFixtures.forEach(fixture => {
                        this.elements.fixturesList.appendChild(this.createFixtureItem(fixture));
                    });
                    this.elements.simulateAllFixturesBtn.disabled = filteredFixtures.filter(f => f.status === 'scheduled').length === 0;
                }

                this.elements.simulateAllFixturesBtn.onclick = () => {
                    if (confirm('Are you sure you want to simulate all remaining fixtures? This cannot be undone.')) {
                        app.logic.simulateAllRemainingFixtures(tournament.id);
                        this.renderCurrentTournamentView();
                    }
                };
            },

            createFixtureItem(fixture) {
                const homeTeam = app.data.getTeam(fixture.homeTeamId);
                const awayTeam = app.data.getTeam(fixture.awayTeamId);
                const item = document.createElement('div');
                item.classList.add('fixture-item', fixture.status);
                item.dataset.fixtureId = fixture.id;
                item.addEventListener('click', () => this.showMatchModal(fixture.id));

                const scoreDisplay = fixture.status === 'played'
                    ? `${fixture.score.home} - ${fixture.score.away}`
                    : 'vs';

                const dateOptions = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                const dateTime = fixture.date ? new Date(fixture.date).toLocaleString([], dateOptions) : 'TBD';

                item.innerHTML = `
                    <div class="match-header">
                        <span>${dateTime}</span>
                        <span class="status-badge ${fixture.status}">${fixture.status}</span>
                    </div>
                    <div class="match-teams">
                        <div class="team-display">
                            <span class="team-logo-placeholder" style="background: ${homeTeam?.primaryColor || '#ccc'};"></span>
                            <span class="team-name">${homeTeam ? homeTeam.name : 'TBD'}</span>
                        </div>
                        <span class="score">${fixture.status === 'played' ? fixture.score.home : ''}</span>
                        <span class="vs">-</span>
                        <span class="score">${fixture.status === 'played' ? fixture.score.away : ''}</span>
                        <div class="team-display away">
                            <span class="team-name">${awayTeam ? awayTeam.name : 'TBD'}</span>
                            <span class="team-logo-placeholder" style="background: ${awayTeam?.primaryColor || '#ccc'};"></span>
                        </div>
                    </div>
                `;
                return item;
            },

            renderStandings() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                this.elements.standingsContainer.innerHTML = '';

                if (tournament.mode === 'league') {
                    const standings = app.logic.calculateStandings(tournament.id);
                    this.elements.standingsContainer.appendChild(this.createStandingsTable(standings, tournament.config.relegationSpots));
                } else { // Champions League & World Cup
                    if (!tournament.groups) {
                        this.elements.standingsContainer.innerHTML = '<p class="text-center">Groups not drawn yet. Go to "Manage" to draw groups.</p>';
                        return;
                    }
                    const groupGrid = document.createElement('div');
                    groupGrid.classList.add('grid-2-col'); // Or grid-3-col depending on number of groups
                    for (const groupId in tournament.groups) {
                        const groupStandings = app.logic.calculateStandings(tournament.id, groupId);
                        const groupCard = document.createElement('div');
                        groupCard.classList.add('group-card');
                        groupCard.innerHTML = `<h3>Group ${groupId}</h3>`;
                        groupCard.appendChild(this.createStandingsTable(groupStandings, 2)); // Top 2 advance
                        groupGrid.appendChild(groupCard);
                    }
                    this.elements.standingsContainer.appendChild(groupGrid);
                }
            },

            createStandingsTable(standings, advanceRelegateCount = 0) {
                const tableResponsive = document.createElement('div');
                tableResponsive.classList.add('table-responsive');

                const table = document.createElement('table');
                table.classList.add('data-table');
                table.innerHTML = `
                    <thead>
                        <tr>
                            <th>Pos</th>
                            <th>Team</th>
                            <th class="sortable" data-sort="P">P</th>
                            <th class="sortable" data-sort="W">W</th>
                            <th class="sortable" data-sort="D">D</th>
                            <th class="sortable" data-sort="L">L</th>
                            <th class="sortable" data-sort="GF">GF</th>
                            <th class="sortable" data-sort="GA">GA</th>
                            <th class="sortable" data-sort="GD">GD</th>
                            <th class="sortable" data-sort="Pts">Pts</th>
                            <th class="sortable" data-sort="FairPlay" data-tooltip="Fair Play: Sum of yellow cards (1 point) and red cards (3 points). Lower is better.">FP</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                `;
                const tbody = table.querySelector('tbody');

                standings.forEach((teamStats, index) => {
                    const team = app.data.getTeam(teamStats.teamId);
                    const row = tbody.insertRow();
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td class="team-name"><span class="team-logo-placeholder" style="background: ${team?.primaryColor || '#ccc'};"></span>${team ? team.name : 'Unknown'}</td>
                        <td>${teamStats.P}</td>
                        <td>${teamStats.W}</td>
                        <td>${teamStats.D}</td>
                        <td>${teamStats.L}</td>
                        <td>${teamStats.GF}</td>
                        <td>${teamStats.GA}</td>
                        <td>${teamStats.GD}</td>
                        <td>${teamStats.Pts}</td>
                        <td>${teamStats.FairPlay}</td>
                    `;
                    if (advanceRelegateCount > 0) {
                        if (index < advanceRelegateCount) {
                            row.style.backgroundColor = 'var(--advancing-bg)'; // Green for advancing
                        } else if (index >= standings.length - advanceRelegateCount && standings.length > advanceRelegateCount) {
                            row.style.backgroundColor = 'var(--relegating-bg)'; // Red for relegating
                        }
                    }
                });

                // Add sorting functionality
                table.querySelectorAll('.sortable').forEach(th => {
                    th.addEventListener('click', () => {
                        const sortKey = th.dataset.sort;
                        const currentSortOrder = th.classList.contains('asc') ? 'asc' : (th.classList.contains('desc') ? 'desc' : '');
                        let newSortOrder = 'asc';
                        if (currentSortOrder === 'asc') newSortOrder = 'desc';
                        else if (currentSortOrder === 'desc') newSortOrder = ''; // Reset sort

                        // Clear previous sort classes
                        table.querySelectorAll('.sortable').forEach(s => s.classList.remove('asc', 'desc'));

                        let sortedStandings = [...standings];
                        if (newSortOrder) {
                            sortedStandings.sort((a, b) => {
                                let valA = a[sortKey];
                                let valB = b[sortKey];

                                // Handle FairPlay (lower is better)
                                if (sortKey === 'FairPlay') {
                                    return newSortOrder === 'asc' ? valA - valB : valB - valA;
                                }

                                // Default numeric sort (higher is better)
                                return newSortOrder === 'asc' ? valB - valA : valA - valB;
                            });
                            th.classList.add(newSortOrder);
                        } else {
                            // If reset, re-calculate to get default order
                            sortedStandings = app.logic.calculateStandings(app.data.currentTournamentId, standings[0]?.groupId);
                        }
                        tbody.innerHTML = ''; // Clear existing rows
                        sortedStandings.forEach((teamStats, index) => {
                            const team = app.data.getTeam(teamStats.teamId);
                            const row = tbody.insertRow();
                            row.innerHTML = `
                                <td>${index + 1}</td>
                                <td class="team-name"><span class="team-logo-placeholder" style="background: ${team?.primaryColor || '#ccc'};"></span>${team ? team.name : 'Unknown'}</td>
                                <td>${teamStats.P}</td>
                                <td>${teamStats.W}</td>
                                <td>${teamStats.D}</td>
                                <td>${teamStats.L}</td>
                                <td>${teamStats.GF}</td>
                                <td>${teamStats.GA}</td>
                                <td>${teamStats.GD}</td>
                                <td>${teamStats.Pts}</td>
                                <td>${teamStats.FairPlay}</td>
                            `;
                            if (advanceRelegateCount > 0) {
                                if (index < advanceRelegateCount) {
                                    row.style.backgroundColor = 'var(--advancing-bg)'; // Green for advancing
                                } else if (index >= standings.length - advanceRelegateCount && standings.length > advanceRelegateCount) {
                                    row.style.backgroundColor = 'var(--relegating-bg)'; // Red for relegating
                                }
                            }
                        });
                    });
                });
                tableResponsive.appendChild(table);
                return tableResponsive;
            },

            renderPlayerStats() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                const allPlayers = app.logic.getAllPlayersWithStats(tournament.id);
                const teamsInTournament = app.data.getTeamsInTournament(tournament.id);

                // Populate team filter
                this.elements.playerStatsTeamFilter.innerHTML = '<option value="">All Teams</option>';
                teamsInTournament.forEach(team => {
                    const option = document.createElement('option');
                    option.value = team.id;
                    option.textContent = team.name;
                    this.elements.playerStatsTeamFilter.appendChild(option);
                });
                this.elements.playerStatsTeamFilter.value = this.elements.playerStatsTeamFilter.value || '';

                const filterTeamId = this.elements.playerStatsTeamFilter.value;
                const filteredPlayers = filterTeamId
                    ? allPlayers.filter(p => p.teamId === filterTeamId)
                    : allPlayers;

                const renderLeaderboard = (tableBody, data, statKey, sortOrder = 'desc') => {
                    tableBody.innerHTML = '';
                    data.sort((a, b) => sortOrder === 'desc' ? b.stats[statKey] - a.stats[statKey] : a.stats[statKey] - b.stats[statKey]);
                    data.slice(0, 10).forEach((player, index) => { // Top 10
                        if (player.stats[statKey] > 0) {
                            const team = app.data.getTeam(player.teamId);
                            const row = tableBody.insertRow();
                            row.innerHTML = `
                                <td>${index + 1}</td>
                                <td>${player.name}</td>
                                <td>${team ? team.name : 'Unknown'}</td>
                                <td class="text-right">${player.stats[statKey]}</td>
                            `;
                        }
                    });
                };

                renderLeaderboard(this.elements.topScorersTable, filteredPlayers, 'goals');
                renderLeaderboard(this.elements.topAssistsTable, filteredPlayers, 'assists');
                renderLeaderboard(this.elements.topYellowCardsTable, filteredPlayers, 'yellowCards');
                renderLeaderboard(this.elements.topRedCardsTable, filteredPlayers, 'redCards');
            },

            renderKnockoutBracket() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                const knockoutData = app.data.getKnockout(tournament.id);
                this.elements.knockoutBracketContainer.innerHTML = '';

                if (!knockoutData || knockoutData.rounds.length === 0) {
                    this.elements.knockoutBracketContainer.innerHTML = '<p class="text-center">Knockout stage not generated yet. Ensure group stage is complete and go to "Manage" to generate.</p>';
                    return;
                }

                const bracketWrapper = document.createElement('div');
                bracketWrapper.classList.add('knockout-rounds-wrapper');
                if (tournament.mode === 'worldcup') {
                    this.elements.knockoutBracketContainer.classList.add('worldcup-bracket');
                } else {
                    this.elements.knockoutBracketContainer.classList.remove('worldcup-bracket');
                }

                knockoutData.rounds.forEach((round, roundIndex) => {
                    const roundDiv = document.createElement('div');
                    roundDiv.classList.add('knockout-round');
                    roundDiv.innerHTML = `<h3 class="knockout-round-title">${round.name}</h3>`;
                    const matchesDiv = document.createElement('div');
                    matchesDiv.classList.add('knockout-matches');

                    round.matches.forEach((matchId, matchIndex) => {
                        const fixture = app.data.getFixture(tournament.id, matchId);
                        if (!fixture) return;

                        const homeTeam = app.data.getTeam(fixture.homeTeamId);
                        const awayTeam = app.data.getTeam(fixture.awayTeamId);

                        const matchContainer = document.createElement('div');
                        matchContainer.classList.add('knockout-match-container');

                        const matchElement = document.createElement('div');
                        matchElement.classList.add('knockout-match');
                        matchElement.dataset.fixtureId = fixture.id;
                        matchElement.addEventListener('click', () => this.showMatchModal(fixture.id));

                        let homeScore = fixture.score?.home || 0;
                        let awayScore = fixture.score?.away || 0;
                        let aggregateScoreHtml = '';
                        let winnerClass = '';

                        if (tournament.mode === 'champions' && fixture.leg) {
                            const aggregate = app.logic.getAggregateScore(tournament.id, fixture.homeTeamId, fixture.awayTeamId, fixture.roundId);
                            if (aggregate) {
                                aggregateScoreHtml = `<div class="aggregate-score">Agg: ${aggregate.home} - ${aggregate.away}</div>`;
                                if (fixture.status === 'played' && aggregate.winnerId) {
                                    if (aggregate.winnerId === fixture.homeTeamId) matchElement.classList.add('winner');
                                }
                            }
                        } else if (tournament.mode === 'worldcup' && fixture.status === 'played' && fixture.winnerId) {
                            if (fixture.winnerId === fixture.homeTeamId) matchElement.classList.add('winner');
                        }

                        matchElement.innerHTML = `
                            <div class="team-line">
                                <span class="team-name"><span class="team-logo-placeholder" style="background: ${homeTeam?.primaryColor || '#ccc'};"></span>${homeTeam ? homeTeam.name : 'TBD'}</span>
                                <span class="score">${fixture.status === 'played' ? homeScore : ''}</span>
                            </div>
                            <div class="team-line">
                                <span class="team-name"><span class="team-logo-placeholder" style="background: ${awayTeam?.primaryColor || '#ccc'};"></span>${awayTeam ? awayTeam.name : 'TBD'}</span>
                                <span class="score">${fixture.status === 'played' ? awayScore : ''}</span>
                            </div>
                            ${aggregateScoreHtml}
                        `;
                        matchContainer.appendChild(matchElement);

                        // Add bracket lines and arrows for Champions League
                        if (tournament.mode === 'champions' && roundIndex < knockoutData.rounds.length - 1) { // Not the final round
                            const arrow = document.createElement('div');
                            arrow.classList.add('bracket-arrow');
                            matchContainer.appendChild(arrow);
                        }
                        matchesDiv.appendChild(matchContainer);
                    });
                    roundDiv.appendChild(matchesDiv);
                    bracketWrapper.appendChild(roundDiv);
                });
                this.elements.knockoutBracketContainer.appendChild(bracketWrapper);
            },

            renderManageSection() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                this.renderTournamentSettingsForm(tournament);
                this.renderManageTeamsTable(tournament);

                // Show/hide generate/draw buttons
                const teams = app.data.getTeamsInTournament(tournament.id);
                const fixtures = app.data.getFixtures(tournament.id);

                if (tournament.mode === 'league') {
                    this.elements.drawGroupsBtn.style.display = 'none';
                    this.elements.generateFixturesBtn.style.display = (teams.length >= 2 && fixtures.length === 0) ? 'inline-flex' : 'none';
                } else { // Champions League & World Cup
                    this.elements.drawGroupsBtn.style.display = (teams.length >= tournament.config.numGroups * tournament.config.groupSize && !tournament.groups) ? 'inline-flex' : 'none';
                    this.elements.generateFixturesBtn.style.display = (tournament.groups && fixtures.length === 0) ? 'inline-flex' : 'none';
                }
            },

            renderTournamentSettingsForm(tournament) {
                const form = this.elements.tournamentSettingsForm;
                form.innerHTML = '';

                const createInput = (id, label, type, value, min = null, max = null, step = null, tooltip = '') => {
                    const div = document.createElement('div');
                    div.classList.add('form-group');
                    div.innerHTML = `<label for="${id}">${label}:</label>`;
                    const input = document.createElement('input');
                    input.type = type;
                    input.id = id;
                    input.value = value;
                    if (min !== null) input.min = min;
                    if (max !== null) input.max = max;
                    if (step !== null) input.step = step;
                    if (tooltip) input.setAttribute('data-tooltip', tooltip);
                    div.appendChild(input);
                    return div;
                };

                const createSelect = (id, label, options, selectedValue, tooltip = '') => {
                    const div = document.createElement('div');
                    div.classList.add('form-group');
                    div.innerHTML = `<label for="${id}">${label}:</label>`;
                    const select = document.createElement('select');
                    select.id = id;
                    if (tooltip) select.setAttribute('data-tooltip', tooltip);
                    options.forEach(opt => {
                        const option = document.createElement('option');
                        option.value = opt.value;
                        option.textContent = opt.text;
                        if (opt.value === selectedValue) option.selected = true;
                        select.appendChild(option);
                    });
                    div.appendChild(select);
                    return div;
                };

                const createCheckbox = (id, label, checked, tooltip = '') => {
                    const div = document.createElement('div');
                    div.classList.add('form-group');
                    const input = document.createElement('input');
                    input.type = 'checkbox';
                    input.id = id;
                    input.checked = checked;
                    if (tooltip) input.setAttribute('data-tooltip', tooltip);
                    const labelElem = document.createElement('label');
                    labelElem.htmlFor = id;
                    labelElem.textContent = label;
                    div.appendChild(input);
                    div.appendChild(labelElem);
                    return div;
                };

                form.appendChild(createInput('tournament-name-setting', 'Tournament Name', 'text', tournament.name));

                if (tournament.mode === 'league') {
                    form.appendChild(createSelect('league-round-robin-type', 'Round-Robin Type', [
                        { value: 'single', text: 'Single Round-Robin' },
                        { value: 'double', text: 'Double Round-Robin' }
                    ], tournament.config.roundRobinType, 'Single: Each team plays once. Double: Each team plays home and away.'));
                    form.appendChild(createInput('league-points-win', 'Points for Win', 'number', tournament.config.pointsWin, 0));
                    form.appendChild(createInput('league-points-draw', 'Points for Draw', 'number', tournament.config.pointsDraw, 0));
                    form.appendChild(createInput('league-points-loss', 'Points for Loss', 'number', tournament.config.pointsLoss, 0));
                    form.appendChild(createInput('league-relegation-spots', 'Relegation Spots (visual)', 'number', tournament.config.relegationSpots, 0, null, null, 'Number of teams to highlight as relegated in standings.'));

                    const tieBreakerOrderDiv = document.createElement('div');
                    tieBreakerOrderDiv.classList.add('form-group');
                    tieBreakerOrderDiv.innerHTML = `<label for="league-tie-breaker-order">Tie-breaker Order (comma-separated):</label>
                                                    <input type="text" id="league-tie-breaker-order" value="${tournament.config.tieBreakerOrder.join(', ')}" data-tooltip="Order of rules to break ties in standings.">
                                                    <small>Options: points, goalDifference, goalsFor, headToHeadPoints, headToHeadGoalDifference, fairPlay, alphabetical</small>`;
                    form.appendChild(tieBreakerOrderDiv);

                } else if (tournament.mode === 'champions' || tournament.mode === 'worldcup') {
                    form.appendChild(createInput('group-size', 'Teams per Group', 'number', tournament.config.groupSize, 2, 8));
                    form.appendChild(createInput('num-groups', 'Number of Groups', 'number', tournament.config.numGroups, 2, 16));
                    form.appendChild(createSelect('group-stage-round-robin-type', 'Group Stage Round-Robin Type', [
                        { value: 'single', text: 'Single Round-Robin' },
                        { value: 'double', text: 'Double Round-Robin' }
                    ], tournament.config.groupStageRoundRobinType, 'Single: Each team plays once. Double: Each team plays home and away within the group.'));

                    if (tournament.mode === 'champions') {
                        form.appendChild(createCheckbox('away-goals-rule-enabled', 'Enable Away Goals Rule (Knockout)', tournament.config.awayGoalsRuleEnabled, 'If enabled, away goals count double in case of an aggregate tie.'));
                    }
                }
            },

            saveTournamentSettings() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                tournament.name = document.getElementById('tournament-name-setting').value.trim();

                if (tournament.mode === 'league') {
                    tournament.config.roundRobinType = document.getElementById('league-round-robin-type').value;
                    tournament.config.pointsWin = parseInt(document.getElementById('league-points-win').value);
                    tournament.config.pointsDraw = parseInt(document.getElementById('league-points-draw').value);
                    tournament.config.pointsLoss = parseInt(document.getElementById('league-points-loss').value);
                    tournament.config.relegationSpots = parseInt(document.getElementById('league-relegation-spots').value);
                    tournament.config.tieBreakerOrder = document.getElementById('league-tie-breaker-order').value.split(',').map(s => s.trim()).filter(Boolean);
                } else if (tournament.mode === 'champions' || tournament.mode === 'worldcup') {
                    tournament.config.groupSize = parseInt(document.getElementById('group-size').value);
                    tournament.config.numGroups = parseInt(document.getElementById('num-groups').value);
                    tournament.config.groupStageRoundRobinType = document.getElementById('group-stage-round-robin-type').value;
                    if (tournament.mode === 'champions') {
                        tournament.config.awayGoalsRuleEnabled = document.getElementById('away-goals-rule-enabled').checked;
                    }
                }

                app.data.saveState();
                this.renderSidebar(); // Update tournament name in sidebar
                this.renderCurrentTournamentView(); // Re-render current view with new settings
                alert('Tournament settings saved!');
            },

            renderManageTeamsTable(tournament) {
                const tbody = this.elements.manageTeamsTable;
                tbody.innerHTML = '';

                const teams = app.data.getTeamsInTournament(tournament.id);
                teams.forEach(team => {
                    const row = tbody.insertRow();
                    row.innerHTML = `
                        <td><span class="team-logo-placeholder" style="background: ${team?.primaryColor || '#ccc'};"></span>${team.name}</td>
                        <td>${team.shortName || ''}</td>
                        <td>${team.country || ''}</td>
                        <td>
                            <button class="btn" style="background-color: var(--info-color); padding: 0.4rem 0.7rem; font-size: 0.8rem;" onclick="app.ui.showTeamModal('${team.id}')"><span role="img" aria-label="Edit">✏️</span> Edit</button>
                            <button class="btn" style="background-color: var(--success-color); padding: 0.4rem 0.7rem; font-size: 0.8rem;" onclick="app.ui.showPlayerModal('${team.id}')"><span role="img" aria-label="Players">👥</span> Players</button>
                            <button class="btn" style="background-color: var(--error-color); padding: 0.4rem 0.7rem; font-size: 0.8rem;" onclick="app.ui.deleteTeam('${team.id}')"><span role="img" aria-label="Delete">🗑️</span> Delete</button>
                        </td>
                    `;
                });
            },

            showTeamModal(teamId = null) {
                this.elements.teamModalId.value = '';
                this.elements.teamName.value = '';
                this.elements.teamShortName.value = '';
                this.elements.teamCountry.value = '';
                this.elements.teamPrimaryColor.value = '#005792';
                this.elements.teamSecondaryColor.value = '#FFFFFF';

                if (teamId) {
                    const team = app.data.getTeam(teamId);
                    if (team) {
                        this.elements.teamModalTitle.textContent = `Edit Team: ${team.name}`;
                        this.elements.teamModalId.value = team.id;
                        this.elements.teamName.value = team.name;
                        this.elements.teamShortName.value = team.shortName || '';
                        this.elements.teamCountry.value = team.country || '';
                        this.elements.teamPrimaryColor.value = team.primaryColor || '#005792';
                        this.elements.teamSecondaryColor.value = team.secondaryColor || '#FFFFFF';
                    }
                } else {
                    this.elements.teamModalTitle.textContent = 'Add New Team';
                }
                this.showModal('team-modal');
            },

            saveTeamFromModal() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                const teamId = this.elements.teamModalId.value;
                const name = this.elements.teamName.value.trim();
                const shortName = this.elements.teamShortName.value.trim().toUpperCase();
                const country = this.elements.teamCountry.value.trim();
                const primaryColor = this.elements.teamPrimaryColor.value;
                const secondaryColor = this.elements.teamSecondaryColor.value;

                if (!name) {
                    alert('Team name is required.');
                    return;
                }

                if (teamId) {
                    // Edit existing team
                    const team = app.data.getTeam(teamId);
                    if (team) {
                        team.name = name;
                        team.shortName = shortName;
                        team.country = country;
                        team.primaryColor = primaryColor;
                        team.secondaryColor = secondaryColor;
                    }
                } else {
                    // Add new team
                    const newTeam = {
                        id: app.data.generateUniqueId(),
                        name,
                        shortName,
                        country,
                        primaryColor,
                        secondaryColor,
                        stats: { P: 0, W: 0, D: 0, L: 0, GF: 0, GA: 0, GD: 0, Pts: 0, FairPlay: 0 }
                    };
                    app.data.state.teams[newTeam.id] = newTeam;
                    tournament.teams.push(newTeam.id);
                }

                app.data.saveState();
                this.hideModal('team-modal');
                this.renderManageTeamsTable(tournament);
                this.renderTournamentActions(tournament); // Update generate/draw buttons
            },

            deleteTeam(teamId) {
                if (!confirm('Are you sure you want to delete this team? This will also remove all its players and affect fixtures/standings.')) {
                    return;
                }
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                // Remove team from tournament's team list
                tournament.teams = tournament.teams.filter(id => id !== teamId);

                // Remove team from global teams object
                delete app.data.state.teams[teamId];

                // Remove players associated with the team
                delete app.data.state.players[teamId];

                // Invalidate fixtures and standings (simplification: regenerate or mark as invalid)
                // For now, we'll just clear fixtures and standings to force regeneration
                delete app.data.state.fixtures[tournament.id];
                delete app.data.state.standings[tournament.id];
                delete app.data.state.knockout[tournament.id];
                delete tournament.groups; // Clear groups if any

                app.data.saveState();
                this.renderManageTeamsTable(tournament);
                this.renderTournamentActions(tournament);
                this.renderCurrentTournamentView(); // Re-render to reflect changes
            },

            showPlayerModal(teamId) {
                this.currentTeamIdForPlayers = teamId;
                const team = app.data.getTeam(teamId);
                if (!team) return;

                this.elements.playerModalTeamName.textContent = team.name;
                this.elements.playerModalTeamId.value = teamId;
                this.elements.editPlayerId.value = '';
                this.elements.playerName.value = '';
                this.elements.playerNumber.value = '';
                this.elements.playerPosition.value = '';
                this.elements.playerModalAddEditBtn.textContent = 'Add Player';

                this.renderPlayersInModal(teamId);
                this.showModal('player-modal');
            },

            renderPlayersInModal(teamId) {
                const tbody = this.elements.managePlayersTable;
                tbody.innerHTML = '';

                const players = app.data.getPlayersInTeam(teamId);
                players.forEach(player => {
                    const row = tbody.insertRow();
                    row.innerHTML = `
                        <td>${player.number || ''}</td>
                        <td>${player.name}</td>
                        <td>${player.position || ''}</td>
                        <td>
                            <button class="btn" style="background-color: var(--info-color); padding: 0.4rem 0.7rem; font-size: 0.8rem;" onclick="app.ui.editPlayer('${teamId}', '${player.id}')"><span role="img" aria-label="Edit">✏️</span> Edit</button>
                            <button class="btn" style="background-color: var(--error-color); padding: 0.4rem 0.7rem; font-size: 0.8rem;" onclick="app.ui.deletePlayer('${teamId}', '${player.id}')"><span role="img" aria-label="Delete">🗑️</span> Delete</button>
                        </td>
                    `;
                });
            },

            addEditPlayerFromModal() {
                const teamId = this.elements.playerModalTeamId.value;
                const playerId = this.elements.editPlayerId.value;
                const name = this.elements.playerName.value.trim();
                const number = parseInt(this.elements.playerNumber.value);
                const position = this.elements.playerPosition.value.trim();

                if (!name) {
                    alert('Player name is required.');
                    return;
                }

                if (!app.data.state.players[teamId]) {
                    app.data.state.players[teamId] = [];
                }

                if (playerId) {
                    // Edit existing player
                    const player = app.data.getPlayersInTeam(teamId).find(p => p.id === playerId);
                    if (player) {
                        player.name = name;
                        player.number = number;
                        player.position = position;
                    }
                } else {
                    // Add new player
                    const newPlayer = {
                        id: app.data.generateUniqueId(),
                        name,
                        number: isNaN(number) ? null : number,
                        position,
                        stats: { goals: 0, assists: 0, yellowCards: 0, redCards: 0, minutes: 0 }
                    };
                    app.data.state.players[teamId].push(newPlayer);
                }

                app.data.saveState();
                this.renderPlayersInModal(teamId);
                // Clear form for next entry
                this.elements.editPlayerId.value = '';
                this.elements.playerName.value = '';
                this.elements.playerNumber.value = '';
                this.elements.playerPosition.value = '';
                this.elements.playerModalAddEditBtn.textContent = 'Add Player';
            },

            editPlayer(teamId, playerId) {
                const player = app.data.getPlayer(teamId, playerId);
                if (player) {
                    this.elements.editPlayerId.value = player.id;
                    this.elements.playerName.value = player.name;
                    this.elements.playerNumber.value = player.number || '';
                    this.elements.playerPosition.value = player.position || '';
                    this.elements.playerModalAddEditBtn.textContent = 'Update Player';
                }
            },

            deletePlayer(teamId, playerId) {
                if (!confirm('Are you sure you want to delete this player?')) {
                    return;
                }
                if (app.data.state.players[teamId]) {
                    app.data.state.players[teamId] = app.data.state.players[teamId].filter(p => p.id !== playerId);
                    app.data.saveState();
                    this.renderPlayersInModal(teamId);
                }
            },

            drawGroups() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                const teams = app.data.getTeamsInTournament(tournament.id);
                if (teams.length < tournament.config.numGroups * tournament.config.groupSize) {
                    alert(`Not enough teams to fill all groups. Need ${tournament.config.numGroups * tournament.config.groupSize} teams.`);
                    return;
                }

                if (confirm('Are you sure you want to draw new groups? This will clear existing groups and fixtures.')) {
                    app.logic.drawGroups(tournament.id);
                    this.renderCurrentTournamentView();
                    alert('Groups drawn successfully!');
                }
            },

            generateFixtures() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                if (!tournament) return;

                const teams = app.data.getTeamsInTournament(tournament.id);
                if (teams.length < 2) {
                    alert('Need at least 2 teams to generate fixtures.');
                    return;
                }

                if (tournament.mode !== 'league' && !tournament.groups) {
                    alert('Please draw groups first for Champions League/World Cup.');
                    return;
                }

                if (confirm('Are you sure you want to generate new fixtures? This will clear any existing fixtures and results.')) {
                    app.logic.generateFixtures(tournament.id);
                    this.renderCurrentTournamentView();
                    alert('Fixtures generated successfully!');
                }
            },

            showMatchModal(fixtureId) {
                this.currentMatchFixtureId = fixtureId;
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                const fixture = app.data.getFixture(tournament.id, fixtureId);
                if (!fixture) return;

                const homeTeam = app.data.getTeam(fixture.homeTeamId);
                const awayTeam = app.data.getTeam(fixture.awayTeamId);

                this.elements.matchModalTitle.textContent = `${homeTeam.name} vs ${awayTeam.name}`;
                this.elements.matchModalDate.textContent = fixture.date ? new Date(fixture.date).toLocaleString() : 'Date TBD';
                this.elements.matchModalHomeTeam.textContent = homeTeam.name;
                this.elements.matchModalAwayTeam.textContent = awayTeam.name;
                this.elements.matchModalHomeScore.value = fixture.score?.home || 0;
                this.elements.matchModalAwayScore.value = fixture.score?.away || 0;

                // Reset ET/Penalties sections
                this.elements.matchModalExtraTimeSection.style.display = 'none';
                this.elements.matchModalPenaltiesSection.style.display = 'none';
                this.elements.matchModalHomeScoreET.value = 0;
                this.elements.matchModalAwayScoreET.value = 0;
                this.elements.matchModalHomeScorePen.value = 0;
                this.elements.matchModalAwayScorePen.value = 0;

                // Show ET/Penalties buttons for knockout matches
                const isKnockout = fixture.stage === 'knockout';
                this.elements.matchModalExtraTimeBtn.style.display = isKnockout ? 'inline-flex' : 'none';
                this.elements.matchModalPenaltiesBtn.style.display = 'none'; // Only show after ET

                if (fixture.extraTime) {
                    this.toggleExtraTimeInput(true);
                    this.elements.matchModalHomeScoreET.value = fixture.extraTime.home || 0;
                    this.elements.matchModalAwayScoreET.value = fixture.extraTime.away || 0;
                    if (fixture.penalties) {
                        this.togglePenaltiesInput(true);
                        this.elements.matchModalHomeScorePen.value = fixture.penalties.home || 0;
                        this.elements.matchModalAwayScorePen.value = fixture.penalties.away || 0;
                    } else {
                        // If ET is shown, and scores are still tied, show penalties button
                        const currentHomeScore = parseInt(this.elements.matchModalHomeScore.value) + parseInt(this.elements.matchModalHomeScoreET.value);
                        const currentAwayScore = parseInt(this.elements.matchModalAwayScore.value) + parseInt(this.elements.matchModalAwayScoreET.value);
                        if (currentHomeScore === currentAwayScore) {
                            this.elements.matchModalPenaltiesBtn.style.display = 'inline-flex';
                        }
                    }
                }

                // Populate event player selects
                this.populatePlayerSelect(fixture.homeTeamId, this.elements.eventPlayer, fixture.awayTeamId);
                this.populatePlayerSelect(fixture.homeTeamId, this.elements.eventAssistPlayer, fixture.awayTeamId, true); // For assists, include both teams
                this.populateEventTeamSelect(fixture.homeTeamId, fixture.awayTeamId);
                this.elements.eventAssistPlayerGroup.style.display = (this.elements.eventType.value === 'goal') ? 'flex' : 'none';

                this.renderMatchEvents(fixture.events || []);
                this.showModal('match-modal');
            },

            populateEventTeamSelect(homeTeamId, awayTeamId) {
                this.elements.eventPlayerTeam.innerHTML = '';
                const homeTeam = app.data.getTeam(homeTeamId);
                const awayTeam = app.data.getTeam(awayTeamId);

                const homeOption = document.createElement('option');
                homeOption.value = homeTeamId;
                homeOption.textContent = homeTeam.name;
                this.elements.eventPlayerTeam.appendChild(homeOption);

                const awayOption = document.createElement('option');
                awayOption.value = awayTeamId;
                awayOption.textContent = awayTeam.name;
                this.elements.eventPlayerTeam.appendChild(awayOption);
            },

            populatePlayerSelect(selectedTeamId, selectElement, otherTeamId = null, includeBothTeams = false) {
                selectElement.innerHTML = '';
                if (selectElement.id === 'event-assist-player') {
                    const noneOption = document.createElement('option');
                    noneOption.value = '';
                    noneOption.textContent = 'None';
                    selectElement.appendChild(noneOption);
                }

                const addPlayers = (teamId) => {
                    const team = app.data.getTeam(teamId);
                    if (team) {
                        const optgroup = document.createElement('optgroup');
                        optgroup.label = team.name;
                        const players = app.data.getPlayersInTeam(teamId);
                        players.forEach(player => {
                            const option = document.createElement('option');
                            option.value = player.id;
                            option.textContent = `${player.name} (#${player.number || 'N/A'})`;
                            optgroup.appendChild(option);
                        });
                        selectElement.appendChild(optgroup);
                    }
                };

                addPlayers(selectedTeamId);
                if (includeBothTeams && otherTeamId && otherTeamId !== selectedTeamId) {
                    addPlayers(otherTeamId);
                }
            },

            renderMatchEvents(events) {
                this.elements.matchModalEventsList.innerHTML = '';
                events.sort((a, b) => a.minute - b.minute);
                events.forEach((event, index) => {
                    const player = app.data.getPlayer(event.teamId, event.playerId);
                    const team = app.data.getTeam(event.teamId);
                    let eventText = `${event.minute}' - ${player ? player.name : 'Unknown Player'} (${team ? team.shortName : 'UNK'})`;
                    let eventClass = '';

                    switch (event.type) {
                        case 'goal':
                            eventClass = 'event-type-goal';
                            const assistPlayer = event.assistId ? app.data.getPlayer(event.teamId, event.assistId) : null;
                            eventText += ` scored! ${assistPlayer ? `(Assist: ${assistPlayer.name})` : ''}`;
                            break;
                        case 'assist':
                            eventClass = 'event-type-assist';
                            eventText += ` assist`;
                            break;
                        case 'yellow':
                            eventClass = 'event-type-yellow';
                            eventText += ` yellow card`;
                            break;
                        case 'red':
                            eventClass = 'event-type-red';
                            eventText += ` red card`;
                            break;
                    }

                    const li = document.createElement('li');
                    li.innerHTML = `
                        <span class="event-details ${eventClass}">${eventText}</span>
                        <div class="event-actions">
                            <button onclick="app.ui.removeEventFromMatchModal('${event.id}')" aria-label="Remove event">&times;</button>
                        </div>
                    `;
                    li.dataset.eventId = event.id;
                    this.elements.matchModalEventsList.appendChild(li);
                });
            },

            addEventToMatchModal() {
                const fixture = app.data.getFixture(app.data.currentTournamentId, this.currentMatchFixtureId);
                if (!fixture) return;

                const eventType = this.elements.eventType.value;
                const eventMinute = parseInt(this.elements.eventMinute.value);
                const eventPlayerId = this.elements.eventPlayer.value;
                const eventPlayerTeamId = this.elements.eventPlayerTeam.value;
                const eventAssistPlayerId = this.elements.eventAssistPlayer.value;

                if (!eventPlayerId) {
                    alert('Please select a player for the event.');
                    return;
                }
                if (isNaN(eventMinute) || eventMinute < 1) {
                    alert('Please enter a valid minute for the event.');
                    return;
                }

                const newEvent = {
                    id: app.data.generateUniqueId(),
                    minute: eventMinute,
                    type: eventType,
                    playerId: eventPlayerId,
                    teamId: eventPlayerTeamId,
                    assistId: (eventType === 'goal' && eventAssistPlayerId) ? eventAssistPlayerId : null
                };

                if (!fixture.events) fixture.events = [];
                fixture.events.push(newEvent);
                this.renderMatchEvents(fixture.events);
            },

            removeEventFromMatchModal(eventId) {
                const fixture = app.data.getFixture(app.data.currentTournamentId, this.currentMatchFixtureId);
                if (!fixture || !fixture.events) return;

                fixture.events = fixture.events.filter(e => e.id !== eventId);
                this.renderMatchEvents(fixture.events);
            },

            simulateMatchInModal() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                const fixture = app.data.getFixture(tournament.id, this.currentMatchFixtureId);
                if (!fixture) return;

                const simulatedScore = app.logic.simulateMatch(fixture.homeTeamId, fixture.awayTeamId);
                this.elements.matchModalHomeScore.value = simulatedScore.home;
                this.elements.matchModalAwayScore.value = simulatedScore.away;

                // Clear ET/Penalties if they were previously added
                this.toggleExtraTimeInput(false);
                this.togglePenaltiesInput(false);

                // If knockout and score is tied, suggest ET
                if (fixture.stage === 'knockout' && simulatedScore.home === simulatedScore.away) {
                    this.elements.matchModalExtraTimeBtn.style.display = 'inline-flex';
                } else {
                    this.elements.matchModalExtraTimeBtn.style.display = 'none';
                }
            },

            toggleExtraTimeInput(show) {
                this.elements.matchModalExtraTimeSection.style.display = show ? 'block' : 'none';
                this.elements.matchModalExtraTimeBtn.style.display = show ? 'none' : 'inline-flex';
                if (!show) {
                    this.elements.matchModalHomeScoreET.value = 0;
                    this.elements.matchModalAwayScoreET.value = 0;
                    this.togglePenaltiesInput(false); // Hide penalties if ET is hidden
                } else {
                    // If ET is shown, and scores are still tied, show penalties button
                    const homeScore = parseInt(this.elements.matchModalHomeScore.value);
                    const awayScore = parseInt(this.elements.matchModalAwayScore.value);
                    if (homeScore === awayScore) {
                        this.elements.matchModalPenaltiesBtn.style.display = 'inline-flex';
                    }
                }
            },

            togglePenaltiesInput(show) {
                this.elements.matchModalPenaltiesSection.style.display = show ? 'block' : 'none';
                this.elements.matchModalPenaltiesBtn.style.display = show ? 'none' : 'inline-flex';
                if (!show) {
                    this.elements.matchModalHomeScorePen.value = 0;
                    this.elements.matchModalAwayScorePen.value = 0;
                }
            },

            saveMatchResultFromModal() {
                const tournament = app.data.getTournament(app.data.currentTournamentId);
                const fixture = app.data.getFixture(tournament.id, this.currentMatchFixtureId);
                if (!fixture) return;

                const homeScore = parseInt(this.elements.matchModalHomeScore.value);
                const awayScore = parseInt(this.elements.matchModalAwayScore.value);

                if (isNaN(homeScore) || isNaN(awayScore) || homeScore < 0 || awayScore < 0) {
                    alert('Please enter valid scores.');
                    return;
                }

                const result = {
                    home: homeScore,
                    away: awayScore
                };

                let extraTimeResult = null;
                if (this.elements.matchModalExtraTimeSection.style.display === 'block') {
                    const homeET = parseInt(this.elements.matchModalHomeScoreET.value);
                    const awayET = parseInt(this.elements.matchModalAwayScoreET.value);
                    if (isNaN(homeET) || isNaN(awayET) || homeET < 0 || awayET < 0) {
                        alert('Please enter valid extra time scores.');
                        return;
                    }
                    extraTimeResult = { home: homeET, away: awayET };
                }

                let penaltiesResult = null;
                if (this.elements.matchModalPenaltiesSection.style.display === 'block') {
                    const homePen = parseInt(this.elements.matchModalHomeScorePen.value);
                    const awayPen = parseInt(this.elements.matchModalAwayScorePen.value);
                    if (isNaN(homePen) || isNaN(awayPen) || homePen < 0 || awayPen < 0) {
                        alert('Please enter valid penalty shootout scores.');
                        return;
                    }
                    penaltiesResult = { home: homePen, away: awayPen };
                }

                app.logic.updateMatchResult(tournament.id, fixture.id, result, fixture.events, extraTimeResult, penaltiesResult);
                this.hideModal('match-modal');
                this.renderCurrentTournamentView(); // Re-render all relevant sections
            },

            updateFabVisibility() {
                const currentTournament = app.data.getTournament(app.data.currentTournamentId);
                const currentTab = this.currentActiveTab;

                this.elements.fabAddTeam.style.display = 'none';
                this.elements.fabSimulateMatchday.style.display = 'none';

                if (currentTournament) {
                    if (currentTab === 'manage') {
                        this.elements.fabAddTeam.style.display = 'flex';
                    }
                    const fixtures = app.data.getFixtures(currentTournament.id);
                    const scheduledFixtures = fixtures.filter(f => f.status === 'scheduled');
                    if (scheduledFixtures.length > 0) {
                        this.elements.fabSimulateMatchday.style.display = 'flex';
                    }
                }
            }
        };

        // --- Tournament Logic ---
        app.logic = {
            init() {
                // Any logic initialization if needed
            },

            createTournament(name, mode) {
                const newTournament = {
                    id: app.data.generateUniqueId(),
                    name,
                    mode,
                    teams: [], // Array of team IDs
                    config: this.getDefaultTournamentConfig(mode),
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                };
                app.data.state.tournaments.push(newTournament);
                app.data.saveState();
                app.data.currentTournamentId = newTournament.id;
                return newTournament;
            },

            getDefaultTournamentConfig(mode) {
                const baseConfig = {
                    pointsWin: 3,
                    pointsDraw: 1,
                    pointsLoss: 0,
                };

                if (mode === 'league') {
                    return {
                        ...baseConfig,
                        roundRobinType: 'double', // 'single' or 'double'
                        relegationSpots: 3,
                        tieBreakerOrder: ['points', 'goalDifference', 'goalsFor', 'headToHeadPoints', 'headToHeadGoalDifference', 'fairPlay', 'alphabetical']
                    };
                } else if (mode === 'champions') {
                    return {
                        ...baseConfig,
                        groupSize: 4,
                        numGroups: 8,
                        groupStageRoundRobinType: 'double',
                        awayGoalsRuleEnabled: false,
                    };
                } else if (mode === 'worldcup') {
                    return {
                        ...baseConfig,
                        groupSize: 4,
                        numGroups: 8,
                        groupStageRoundRobinType: 'single',
                    };
                }
                return baseConfig;
            },

            // --- Fixture Generation ---
            generateFixtures(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return;

                const teams = app.data.getTeamsInTournament(tournamentId);
                if (teams.length < 2) {
                    console.error('Not enough teams to generate fixtures.');
                    return;
                }

                let generatedFixtures = [];
                if (tournament.mode === 'league') {
                    generatedFixtures = this.generateLeagueFixtures(tournament.id, teams, tournament.config.roundRobinType);
                } else { // Champions League & World Cup
                    if (!tournament.groups) {
                        console.error('Groups not drawn for group stage tournament.');
                        return;
                    }
                    generatedFixtures = this.generateGroupStageFixtures(tournament.id, tournament.groups, tournament.config.groupStageRoundRobinType);
                }

                app.data.state.fixtures[tournamentId] = generatedFixtures;
                app.data.state.standings[tournamentId] = {}; // Clear standings
                app.data.state.knockout[tournamentId] = null; // Clear knockout
                app.data.saveState();
            },

            generateLeagueFixtures(tournamentId, teams, roundRobinType = 'double') {
                const numTeams = teams.length;
                const fixtures = [];
                const teamIds = teams.map(t => t.id);

                if (numTeams % 2 !== 0) {
                    teamIds.push('BYE'); // Add a dummy team for odd number of teams
                }

                const numRounds = (teamIds.length - 1); // Number of rounds for single round-robin
                const half = teamIds.length / 2;

                for (let round = 0; round < numRounds; round++) {
                    for (let i = 0; i < half; i++) {
                        const homeTeamId = teamIds[i];
                        const awayTeamId = teamIds[teamIds.length - 1 - i];

                        if (homeTeamId !== 'BYE' && awayTeamId !== 'BYE') {
                            // First leg
                            fixtures.push({
                                id: app.data.generateUniqueId(),
                                tournamentId,
                                date: new Date(Date.now() + (round * 7 * 24 * 60 * 60 * 1000)).toISOString(), // Weekly matches
                                homeTeamId: homeTeamId,
                                awayTeamId: awayTeamId,
                                stage: 'league',
                                leg: 1,
                                status: 'scheduled',
                                score: { home: null, away: null },
                                events: []
                            });
                        }
                    }

                    // Rotate teams (Berger table method)
                    const lastTeam = teamIds.pop();
                    teamIds.splice(1, 0, lastTeam);
                }

                if (roundRobinType === 'double') {
                    const secondLegFixtures = fixtures.map(f => ({
                        ...f,
                        id: app.data.generateUniqueId(),
                        homeTeamId: f.awayTeamId, // Swap home and away
                        awayTeamId: f.homeTeamId,
                        leg: 2,
                        date: new Date(new Date(f.date).getTime() + (numRounds * 7 * 24 * 60 * 60 * 1000)).toISOString(), // Offset dates for second leg
                    }));
                    fixtures.push(...secondLegFixtures);
                }

                return fixtures;
            },

            drawGroups(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return;

                const allTeams = app.data.getTeamsInTournament(tournamentId);
                const numGroups = tournament.config.numGroups;
                const groupSize = tournament.config.groupSize;

                if (allTeams.length < numGroups * groupSize) {
                    alert(`Not enough teams (${allTeams.length}) for ${numGroups} groups of ${groupSize} teams each. Need ${numGroups * groupSize} teams.`);
                    return;
                }

                // Shuffle teams
                const shuffledTeams = [...allTeams].sort(() => Math.random() - 0.5);

                const groups = {};
                for (let i = 0; i < numGroups; i++) {
                    const groupName = String.fromCharCode(65 + i); // A, B, C...
                    groups[groupName] = [];
                }

                let currentGroupIndex = 0;
                for (const team of shuffledTeams) {
                    let assigned = false;
                    // Try to assign to current group
                    if (groups[String.fromCharCode(65 + currentGroupIndex)].length < groupSize) {
                        const teamsInCurrentGroup = groups[String.fromCharCode(65 + currentGroupIndex)].map(id => app.data.getTeam(id));
                        const currentGroupCountries = new Set(teamsInCurrentGroup.map(t => t.country));
                        if (!currentGroupCountries.has(team.country) || teamsInCurrentGroup.filter(t => t.country === team.country).length === 0) {
                            groups[String.fromCharCode(65 + currentGroupIndex)].push(team.id);
                            assigned = true;
                        }
                    }

                    // If not assigned or country conflict, try other groups
                    if (!assigned) {
                        let foundSpot = false;
                        for (let j = 0; j < numGroups; j++) {
                            const targetGroupIndex = (currentGroupIndex + j) % numGroups;
                            const targetGroupName = String.fromCharCode(65 + targetGroupIndex);
                            if (groups[targetGroupName].length < groupSize) {
                                const teamsInTargetGroup = groups[targetGroupName].map(id => app.data.getTeam(id));
                                const targetGroupCountries = new Set(teamsInTargetGroup.map(t => t.country));
                                if (!targetGroupCountries.has(team.country) || teamsInTargetGroup.filter(t => t.country === team.country).length === 0) {
                                    groups[targetGroupName].push(team.id);
                                    foundSpot = true;
                                    break;
                                }
                            }
                        }
                        if (!foundSpot) {
                            // Fallback: if no country-safe spot, just put it in the first available group
                            for (let j = 0; j < numGroups; j++) {
                                const targetGroupIndex = (currentGroupIndex + j) % numGroups;
                                const targetGroupName = String.fromCharCode(65 + targetGroupIndex);
                                if (groups[targetGroupName].length < groupSize) {
                                    groups[targetGroupName].push(team.id);
                                    foundSpot = true;
                                    console.warn(`Could not avoid same country for ${team.name} in group ${targetGroupName}.`);
                                    break;
                                }
                            }
                        }
                    }
                    currentGroupIndex = (currentGroupIndex + 1) % numGroups;
                }

                tournament.groups = groups;
                app.data.saveState();
            },

            generateGroupStageFixtures(tournamentId, groups, roundRobinType = 'single') {
                const fixtures = [];
                let fixtureDate = new Date();

                for (const groupId in groups) {
                    const teamIds = groups[groupId];
                    const numTeams = teamIds.length;

                    if (numTeams < 2) continue;

                    // Generate round-robin for each group
                    const groupFixtures = [];
                    // Using Berger table method for round-robin within groups for better home/away balance
                    let currentGroupTeamIds = [...teamIds];
                    if (numTeams % 2 !== 0) {
                        currentGroupTeamIds.push('BYE');
                    }
                    const numGroupRounds = currentGroupTeamIds.length - 1;
                    const half = currentGroupTeamIds.length / 2;

                    for (let round = 0; round < numGroupRounds; round++) {
                        for (let i = 0; i < half; i++) {
                            const homeTeamId = currentGroupTeamIds[i];
                            const awayTeamId = currentGroupTeamIds[currentGroupTeamIds.length - 1 - i];

                            if (homeTeamId !== 'BYE' && awayTeamId !== 'BYE') {
                                // First leg
                                groupFixtures.push({
                                    id: app.data.generateUniqueId(),
                                    tournamentId,
                                    date: new Date(fixtureDate.getTime()).toISOString(),
                                    homeTeamId: homeTeamId,
                                    awayTeamId: awayTeamId,
                                    stage: 'group',
                                    groupId: groupId,
                                    leg: 1,
                                    status: 'scheduled',
                                    score: { home: null, away: null },
                                    events: []
                                });
                            }
                        }
                        // Rotate teams
                        const lastTeam = currentGroupTeamIds.pop();
                        currentGroupTeamIds.splice(1, 0, lastTeam);
                    }

                    if (roundRobinType === 'double') {
                        const secondLegFixtures = groupFixtures.map(f => ({
                            ...f,
                            id: app.data.generateUniqueId(),
                            homeTeamId: f.awayTeamId, // Swap home and away
                            awayTeamId: f.homeTeamId,
                            leg: 2,
                            date: new Date(new Date(f.date).getTime() + (numGroupRounds * 7 * 24 * 60 * 60 * 1000)).toISOString(), // Offset dates for second leg
                        }));
                        fixtures.push(...secondLegFixtures);
                    }
                    fixtures.push(...groupFixtures);
                    fixtureDate.setDate(fixtureDate.getDate() + 7); // Advance date for next group's first match
                }
                return fixtures;
            },

            generateKnockoutFixtures(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return;

                const qualifiedTeams = this.getQualifiedTeams(tournamentId);
                if (qualifiedTeams.length < 2) {
                    console.warn('Not enough qualified teams for knockout stage.');
                    return;
                }

                const knockout = {
                    rounds: [],
                    winnerId: null,
                };

                let currentTeams = qualifiedTeams;
                let roundNumber = 1;
                let roundName = '';

                while (currentTeams.length >= 2) {
                    const numTeams = currentTeams.length;
                    const numMatches = numTeams / 2;
                    const roundMatches = [];
                    const nextRoundTeams = [];
                    const roundId = app.data.generateUniqueId();

                    if (numTeams === 16) roundName = 'Round of 16';
                    else if (numTeams === 8) roundName = 'Quarter-finals';
                    else if (numTeams === 4) roundName = 'Semi-finals';
                    else if (numTeams === 2) roundName = 'Final';
                    else roundName = `Round ${roundNumber}`;

                    let fixtureDate = new Date(Date.now() + (roundNumber * 14 * 24 * 60 * 60 * 1000)); // Two weeks after previous round

                    for (let i = 0; i < numMatches; i++) {
                        const homeTeamId = currentTeams[i].teamId;
                        const awayTeamId = currentTeams[numTeams - 1 - i].teamId; // Seed 1 vs Last, Seed 2 vs Second Last etc.

                        const fixture1 = {
                            id: app.data.generateUniqueId(),
                            tournamentId,
                            date: new Date(fixtureDate.getTime()).toISOString(),
                            homeTeamId: homeTeamId,
                            awayTeamId: awayTeamId,
                            stage: 'knockout',
                            roundId: roundId,
                            leg: 1,
                            status: 'scheduled',
                            score: { home: null, away: null },
                            events: []
                        };
                        app.data.state.fixtures[tournamentId].push(fixture1);
                        roundMatches.push(fixture1.id);

                        if (tournament.mode === 'champions' && numTeams > 2) { // Two-legged ties for CL, except final
                            const fixture2 = {
                                id: app.data.generateUniqueId(),
                                tournamentId,
                                date: new Date(fixtureDate.getTime() + (7 * 24 * 60 * 60 * 1000)).toISOString(), // A week later
                                homeTeamId: awayTeamId, // Swap home/away for second leg
                                awayTeamId: homeTeamId,
                                stage: 'knockout',
                                roundId: roundId,
                                leg: 2,
                                status: 'scheduled',
                                score: { home: null, away: null },
                                events: []
                            };
                            app.data.state.fixtures[tournamentId].push(fixture2);
                            roundMatches.push(fixture2.id);
                        }
                        nextRoundTeams.push({ teamId: null, seed: i + 1 }); // Placeholder for next round
                    }

                    knockout.rounds.push({
                        id: roundId,
                        name: roundName,
                        matches: roundMatches,
                        nextRoundTeams: nextRoundTeams, // Store placeholders for next round
                    });

                    currentTeams = nextRoundTeams; // Update currentTeams for next iteration
                    roundNumber++;
                }

                app.data.state.knockout[tournamentId] = knockout;
                app.data.saveState();
            },

            getQualifiedTeams(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament || !tournament.groups) return [];

                const qualified = [];
                for (const groupId in tournament.groups) {
                    const standings = this.calculateStandings(tournamentId, groupId);
                    // Top 2 teams from each group qualify
                    if (standings.length >= 2) {
                        qualified.push({ teamId: standings[0].teamId, seed: 1, group: groupId });
                        qualified.push({ teamId: standings[1].teamId, seed: 2, group: groupId });
                    }
                }

                // Simple seeding for knockout: Group winners vs Group runners-up
                // A1 vs B2, B1 vs A2, C1 vs D2, D1 vs C2, etc.
                // This is a simplified draw. A real CL draw has more complex rules (country protection, pot seeding).
                qualified.sort((a, b) => {
                    const groupA = a.group.charCodeAt(0);
                    const groupB = b.group.charCodeAt(0);
                    if (groupA !== groupB) return groupA - groupB;
                    return a.seed - b.seed;
                });

                const finalQualified = [];
                const winners = qualified.filter(t => t.seed === 1);
                const runnersUp = qualified.filter(t => t.seed === 2);

                // Pair A1 vs B2, B1 vs A2, C1 vs D2, D1 vs C2 etc.
                // This ensures group winners play runners-up and avoids same group teams in R16
                for (let i = 0; i < winners.length; i++) {
                    finalQualified.push(winners[i]);
                    finalQualified.push(runnersUp[(i + Math.floor(winners.length / 2)) % runnersUp.length]); // Simple pairing logic
                }

                return finalQualified;
            },

            // --- Match Simulation & Result Update ---
            simulateMatch(homeTeamId, awayTeamId) {
                // Simple random score generation, capped to avoid extreme results
                const generateGoals = () => Math.floor(Math.random() * 4); // 0-3 goals
                return {
                    home: generateGoals(),
                    away: generateGoals()
                };
            },

            updateMatchResult(tournamentId, fixtureId, score, events = [], extraTime = null, penalties = null) {
                const tournament = app.data.getTournament(tournamentId);
                const fixture = app.data.getFixture(tournamentId, fixtureId);
                if (!fixture) return;

                // Revert previous stats if match was already played
                if (fixture.status === 'played') {
                    this.revertMatchStats(tournamentId, fixture);
                }

                fixture.score = score;
                fixture.events = events;
                fixture.extraTime = extraTime;
                fixture.penalties = penalties;
                fixture.status = 'played';

                // Determine winner for knockout matches
                if (fixture.stage === 'knockout') {
                    const winnerInfo = this.determineKnockoutWinner(tournamentId, fixture);
                    fixture.winnerId = winnerInfo.winnerId;
                    fixture.loserId = winnerInfo.loserId;
                }

                // Update team and player stats
                this.applyMatchStats(tournamentId, fixture);

                app.data.saveState();
                this.updateKnockoutBracket(tournamentId); // Update bracket if knockout
            },

            revertMatchStats(tournamentId, fixture) {
                const tournament = app.data.getTournament(tournamentId);
                const config = tournament.config;

                const homeTeam = app.data.getTeam(fixture.homeTeamId);
                const awayTeam = app.data.getTeam(fixture.awayTeamId);

                if (!homeTeam || !awayTeam || !fixture.score) return;

                // Revert team stats
                homeTeam.stats.P--;
                awayTeam.stats.P--;

                homeTeam.stats.GF -= fixture.score.home;
                homeTeam.stats.GA -= fixture.score.away;
                homeTeam.stats.GD = homeTeam.stats.GF - homeTeam.stats.GA;

                awayTeam.stats.GF -= fixture.score.away;
                awayTeam.stats.GA -= fixture.score.home;
                awayTeam.stats.GD = awayTeam.stats.GF - awayTeam.stats.GA;

                if (fixture.score.home > fixture.score.away) {
                    homeTeam.stats.W--;
                    awayTeam.stats.L--;
                    homeTeam.stats.Pts -= config.pointsWin;
                } else if (fixture.score.home < fixture.score.away) {
                    homeTeam.stats.L--;
                    awayTeam.stats.W--;
                    awayTeam.stats.Pts -= config.pointsWin;
                } else {
                    homeTeam.stats.D--;
                    awayTeam.stats.D--;
                    homeTeam.stats.Pts -= config.pointsDraw;
                    awayTeam.stats.Pts -= config.pointsDraw;
                }

                // Revert player stats and fair play
                if (fixture.events) {
                    fixture.events.forEach(event => {
                        const player = app.data.getPlayer(event.teamId, event.playerId);
                        if (player) {
                            if (event.type === 'goal') player.stats.goals--;
                            if (event.type === 'assist') {
                                const assistPlayer = app.data.getPlayer(event.teamId, event.assistId);
                                if (assistPlayer) assistPlayer.stats.assists--;
                            }
                            if (event.type === 'yellow') {
                                player.stats.yellowCards--;
                                app.data.getTeam(event.teamId).stats.FairPlay--;
                            }
                            if (event.type === 'red') {
                                player.stats.redCards--;
                                app.data.getTeam(event.teamId).stats.FairPlay -= 3; // Red card penalty
                            }
                        }
                    });
                }
                // Revert minutes played (simplified)
                const minutesPlayed = fixture.extraTime ? 120 : 90;
                const homePlayers = app.data.getPlayersInTeam(fixture.homeTeamId);
                homePlayers.forEach(p => p.stats.minutes -= minutesPlayed);
                const awayPlayers = app.data.getPlayersInTeam(fixture.awayTeamId);
                awayPlayers.forEach(p => p.stats.minutes -= minutesPlayed);
            },

            applyMatchStats(tournamentId, fixture) {
                const tournament = app.data.getTournament(tournamentId);
                const config = tournament.config;

                const homeTeam = app.data.getTeam(fixture.homeTeamId);
                const awayTeam = app.data.getTeam(fixture.awayTeamId);

                if (!homeTeam || !awayTeam || !fixture.score) return;

                // Update team stats
                homeTeam.stats.P++;
                awayTeam.stats.P++;

                homeTeam.stats.GF += fixture.score.home;
                homeTeam.stats.GA += fixture.score.away;
                awayTeam.stats.GF += fixture.score.away;
                awayTeam.stats.GA += fixture.score.home;

                if (fixture.score.home > fixture.score.away) {
                    homeTeam.stats.W++;
                    awayTeam.stats.L++;
                    homeTeam.stats.Pts += config.pointsWin;
                } else if (fixture.score.home < fixture.score.away) {
                    homeTeam.stats.L++;
                    awayTeam.stats.W++;
                    awayTeam.stats.Pts += config.pointsWin;
                } else {
                    homeTeam.stats.D++;
                    awayTeam.stats.D++;
                    homeTeam.stats.Pts += config.pointsDraw;
                    awayTeam.stats.Pts += config.pointsDraw;
                }

                // Update player stats and fair play
                if (fixture.events) {
                    fixture.events.forEach(event => {
                        const player = app.data.getPlayer(event.teamId, event.playerId);
                        if (player) {
                            if (event.type === 'goal') player.stats.goals++;
                            if (event.type === 'assist') {
                                const assistPlayer = app.data.getPlayer(event.teamId, event.assistId);
                                if (assistPlayer) assistPlayer.stats.assists++;
                            }
                            if (event.type === 'yellow') {
                                player.stats.yellowCards++;
                                app.data.getTeam(event.teamId).stats.FairPlay++;
                            }
                            if (event.type === 'red') {
                                player.stats.redCards++;
                                app.data.getTeam(event.teamId).stats.FairPlay += 3; // Red card penalty
                            }
                        }
                    });
                }

                // Update minutes played (simplified: all players on roster get minutes)
                const minutesPlayed = fixture.extraTime ? 120 : 90;
                const homePlayers = app.data.getPlayersInTeam(fixture.homeTeamId);
                homePlayers.forEach(p => p.stats.minutes += minutesPlayed);
                const awayPlayers = app.data.getPlayersInTeam(fixture.awayTeamId);
                awayPlayers.forEach(p => p.stats.minutes += minutesPlayed);
            },

            determineKnockoutWinner(tournamentId, fixture) {
                const tournament = app.data.getTournament(tournamentId);
                const knockout = app.data.getKnockout(tournamentId);
                const config = tournament.config;

                let homeTotalGoals = fixture.score.home;
                let awayTotalGoals = fixture.score.away;

                if (fixture.extraTime) {
                    homeTotalGoals += fixture.extraTime.home;
                    awayTotalGoals += fixture.extraTime.away;
                }

                let winnerId = null;
                let loserId = null;

                if (tournament.mode === 'champions' && fixture.leg) {
                    // For Champions League, need to consider aggregate score over two legs
                    const roundMatches = knockout.rounds.find(r => r.id === fixture.roundId).matches;
                    const otherLegFixture = app.data.getFixture(tournamentId, roundMatches.find(mId => mId !== fixture.id));

                    if (otherLegFixture && otherLegFixture.status === 'played') {
                        const firstLeg = fixture.leg === 1 ? fixture : otherLegFixture;
                        const secondLeg = fixture.leg === 2 ? fixture : otherLegFixture;

                        const aggHomeGoals = (firstLeg.homeTeamId === fixture.homeTeamId ? firstLeg.score.home : firstLeg.score.away) +
                                             (secondLeg.homeTeamId === fixture.homeTeamId ? secondLeg.score.home : secondLeg.score.away);
                        const aggAwayGoals = (firstLeg.homeTeamId === fixture.awayTeamId ? firstLeg.score.home : firstLeg.score.away) +
                                             (secondLeg.homeTeamId === fixture.awayTeamId ? secondLeg.score.home : secondLeg.score.away);

                        const aggHomeAwayGoals = (firstLeg.homeTeamId === fixture.homeTeamId ? firstLeg.score.away : firstLeg.score.home) +
                                                 (secondLeg.homeTeamId === fixture.homeTeamId ? secondLeg.score.away : secondLeg.score.home);
                        const aggAwayAwayGoals = (firstLeg.homeTeamId === fixture.awayTeamId ? firstLeg.score.away : firstLeg.score.home) +
                                                 (secondLeg.homeTeamId === fixture.awayTeamId ? secondLeg.score.away : secondLeg.score.home);

                        if (aggHomeGoals > aggAwayGoals) {
                            winnerId = fixture.homeTeamId;
                            loserId = fixture.awayTeamId;
                        } else if (aggHomeGoals < aggAwayGoals) {
                            winnerId = fixture.awayTeamId;
                            loserId = fixture.homeTeamId;
                        } else { // Aggregate score is tied
                            if (config.awayGoalsRuleEnabled) {
                                // Away goals rule: team with more away goals wins
                                if (aggHomeAwayGoals > aggAwayAwayGoals) { // Home team scored more away goals
                                    winnerId = fixture.homeTeamId;
                                    loserId = fixture.awayTeamId;
                                } else if (aggHomeAwayGoals < aggAwayAwayGoals) { // Away team scored more away goals
                                    winnerId = fixture.awayTeamId;
                                    loserId = fixture.homeTeamId;
                                }
                            }

                            if (!winnerId) { // Still tied after away goals or rule disabled
                                if (fixture.penalties) {
                                    if (fixture.penalties.home > fixture.penalties.away) {
                                        winnerId = fixture.homeTeamId;
                                        loserId = fixture.awayTeamId;
                                    } else {
                                        winnerId = fixture.awayTeamId;
                                        loserId = fixture.homeTeamId;
                                    }
                                }
                            }
                        }
                    }
                } else { // World Cup (single leg) or Champions League Final
                    if (homeTotalGoals > awayTotalGoals) {
                        winnerId = fixture.homeTeamId;
                        loserId = fixture.awayTeamId;
                    } else if (homeTotalGoals < awayTotalGoals) {
                        winnerId = fixture.awayTeamId;
                        loserId = fixture.homeTeamId;
                    } else { // Tied after regular/extra time
                        if (fixture.penalties) {
                            if (fixture.penalties.home > fixture.penalties.away) {
                                winnerId = fixture.homeTeamId;
                                loserId = fixture.awayTeamId;
                            } else {
                                winnerId = fixture.awayTeamId;
                                loserId = fixture.homeTeamId;
                            }
                        }
                    }
                }
                return { winnerId, loserId };
            },

            getAggregateScore(tournamentId, team1Id, team2Id, roundId) {
                const tournament = app.data.getTournament(tournamentId);
                const knockout = app.data.getKnockout(tournamentId);
                if (!tournament || !knockout) return null;

                const round = knockout.rounds.find(r => r.id === roundId);
                if (!round) return null;

                let team1Goals = 0;
                let team2Goals = 0;
                let team1AwayGoals = 0;
                let team2AwayGoals = 0;
                let allMatchesPlayed = true;

                round.matches.forEach(matchId => {
                    const fixture = app.data.getFixture(tournamentId, matchId);
                    if (!fixture || fixture.status !== 'played') {
                        allMatchesPlayed = false;
                        return;
                    }

                    if ((fixture.homeTeamId === team1Id && fixture.awayTeamId === team2Id) ||
                        (fixture.homeTeamId === team2Id && fixture.awayTeamId === team1Id)) {

                        if (fixture.homeTeamId === team1Id) {
                            team1Goals += fixture.score.home;
                            team2Goals += fixture.score.away;
                            team1AwayGoals += fixture.score.away; // Team 1 scored away
                            team2AwayGoals += fixture.score.home; // Team 2 scored away
                        } else { // fixture.homeTeamId === team2Id
                            team1Goals += fixture.score.away;
                            team2Goals += fixture.score.home;
                            team1AwayGoals += fixture.score.home; // Team 1 scored away
                            team2AwayGoals += fixture.score.away; // Team 2 scored away
                        }

                        if (fixture.extraTime) {
                            if (fixture.homeTeamId === team1Id) {
                                team1Goals += fixture.extraTime.home;
                                team2Goals += fixture.extraTime.away;
                            } else {
                                team1Goals += fixture.extraTime.away;
                                team2Goals += fixture.extraTime.home;
                            }
                        }
                    }
                });

                if (!allMatchesPlayed) return null; // Only calculate aggregate if both legs are played

                let winnerId = null;
                let loserId = null;

                if (team1Goals > team2Goals) {
                    winnerId = team1Id;
                    loserId = team2Id;
                } else if (team1Goals < team2Goals) {
                    winnerId = team2Id;
                    loserId = team1Id;
                } else { // Aggregate tied
                    if (tournament.config.awayGoalsRuleEnabled) {
                        if (team1AwayGoals > team2AwayGoals) {
                            winnerId = team1Id;
                            loserId = team2Id;
                        } else if (team1AwayGoals < team2AwayGoals) {
                            winnerId = team2Id;
                            loserId = team1Id;
                        }
                    }
                    // If still tied, winner is determined by penalties in the second leg
                    const secondLegFixture = round.matches.map(id => app.data.getFixture(tournamentId, id)).find(f => f.leg === 2);
                    if (secondLegFixture && secondLegFixture.penalties) {
                        if (secondLegFixture.penalties.home > secondLegFixture.penalties.away) {
                            winnerId = secondLegFixture.homeTeamId;
                            loserId = secondLegFixture.awayTeamId;
                        } else {
                            winnerId = secondLegFixture.awayTeamId;
                            loserId = secondLegFixture.homeTeamId;
                        }
                    }
                }

                return {
                    home: team1Goals,
                    away: team2Goals,
                    awayGoalsHomeTeam: team1AwayGoals,
                    awayGoalsAwayTeam: team2AwayGoals,
                    winnerId,
                    loserId
                };
            },

            updateKnockoutBracket(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                const knockout = app.data.getKnockout(tournamentId);
                if (!tournament || !knockout) return;

                let changed = false;
                for (let i = 0; i < knockout.rounds.length; i++) {
                    const round = knockout.rounds[i];
                    const nextRound = knockout.rounds[i + 1];

                    let allMatchesPlayedInRound = true;
                    const roundWinners = [];

                    // Collect winners from current round
                    for (let j = 0; j < round.matches.length; j++) {
                        const fixture = app.data.getFixture(tournamentId, round.matches[j]);
                        if (!fixture || fixture.status !== 'played') {
                            allMatchesPlayedInRound = false;
                            break;
                        }
                        // For two-legged ties, winner is determined by aggregate score
                        if (tournament.mode === 'champions' && fixture.leg) {
                            const aggregate = this.getAggregateScore(tournamentId, fixture.homeTeamId, fixture.awayTeamId, fixture.roundId);
                            if (aggregate && aggregate.winnerId) {
                                roundWinners.push(aggregate.winnerId);
                            } else {
                                allMatchesPlayedInRound = false; // Aggregate not determined yet
                                break;
                            }
                        } else if (fixture.winnerId) {
                            roundWinners.push(fixture.winnerId);
                        } else {
                            allMatchesPlayedInRound = false; // Single match not decided
                            break;
                        }
                    }

                    if (allMatchesPlayedInRound && nextRound) {
                        // Populate next round's teams
                        const uniqueWinners = [...new Set(roundWinners)]; // Ensure unique winners for two-legged ties
                        if (uniqueWinners.length === nextRound.nextRoundTeams.length) {
                            uniqueWinners.forEach((winnerId, index) => {
                                if (nextRound.nextRoundTeams[index].teamId !== winnerId) {
                                    nextRound.nextRoundTeams[index].teamId = winnerId;
                                    changed = true;
                                }
                            });
                        }

                        // If next round's teams are all set, generate its fixtures if not already
                        const nextRoundTeamsReady = nextRound.nextRoundTeams.every(t => t.teamId !== null);
                        const nextRoundFixturesExist = nextRound.matches.length > 0;

                        if (nextRoundTeamsReady && !nextRoundFixturesExist) {
                            const nextRoundFixtureDate = new Date(Date.now() + ((i + 2) * 14 * 24 * 60 * 60 * 1000));
                            const numMatches = nextRound.nextRoundTeams.length / 2;
                            for (let k = 0; k < numMatches; k++) {
                                const homeTeamId = nextRound.nextRoundTeams[k].teamId;
                                const awayTeamId = nextRound.nextRoundTeams[nextRound.nextRoundTeams.length - 1 - k].teamId;

                                const fixture1 = {
                                    id: app.data.generateUniqueId(),
                                    tournamentId,
                                    date: new Date(nextRoundFixtureDate.getTime()).toISOString(),
                                    homeTeamId: homeTeamId,
                                    awayTeamId: awayTeamId,
                                    stage: 'knockout',
                                    roundId: nextRound.id,
                                    leg: 1,
                                    status: 'scheduled',
                                    score: { home: null, away: null },
                                    events: []
                                };
                                app.data.state.fixtures[tournamentId].push(fixture1);
                                nextRound.matches.push(fixture1.id);

                                if (tournament.mode === 'champions' && nextRound.nextRoundTeams.length > 2) {
                                    const fixture2 = {
                                        id: app.data.generateUniqueId(),
                                        tournamentId,
                                        date: new Date(nextRoundFixtureDate.getTime() + (7 * 24 * 60 * 60 * 1000)).toISOString(),
                                        homeTeamId: awayTeamId,
                                        awayTeamId: homeTeamId,
                                        stage: 'knockout',
                                        roundId: nextRound.id,
                                        leg: 2,
                                        status: 'scheduled',
                                        score: { home: null, away: null },
                                        events: []
                                    };
                                    app.data.state.fixtures[tournamentId].push(fixture2);
                                    nextRound.matches.push(fixture2.id);
                                }
                            }
                            changed = true;
                        }
                    } else if (allMatchesPlayedInRound && !nextRound && round.matches.length === 1) {
                        // Final round, determine tournament winner
                        const finalFixture = app.data.getFixture(tournamentId, round.matches[0]);
                        if (finalFixture && finalFixture.winnerId && knockout.winnerId !== finalFixture.winnerId) {
                            knockout.winnerId = finalFixture.winnerId;
                            changed = true;
                        }
                    }
                }

                if (changed) {
                    app.data.saveState();
                    app.ui.renderKnockoutBracket(); // Re-render the bracket
                }
            },

            // --- Standings Calculation ---
            calculateStandings(tournamentId, groupId = null) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return [];

                const teamsInScope = groupId
                    ? tournament.groups[groupId].map(id => app.data.getTeam(id))
                    : app.data.getTeamsInTournament(tournamentId);

                const teamStatsMap = {};
                teamsInScope.forEach(team => {
                    teamStatsMap[team.id] = {
                        teamId: team.id,
                        P: 0, W: 0, D: 0, L: 0, GF: 0, GA: 0, GD: 0, Pts: 0, FairPlay: 0,
                        // For head-to-head tie-breaker
                        h2hMatches: {}, // { opponentId: { homeScore, awayScore, homeTeamId, awayTeamId } }
                        h2hPoints: 0,
                        h2hGF: 0,
                        h2hGA: 0,
                        h2hGD: 0,
                    };
                });

                const fixtures = app.data.getFixtures(tournamentId).filter(f => f.status === 'played');
                const relevantFixtures = fixtures.filter(f => {
                    const isRelevantGroup = groupId ? f.groupId === groupId : f.stage === 'league';
                    const involvesTeamsInScope = teamsInScope.some(t => t.id === f.homeTeamId || t.id === f.awayTeamId);
                    return isRelevantGroup && involvesTeamsInScope;
                });

                relevantFixtures.forEach(fixture => {
                    const homeStats = teamStatsMap[fixture.homeTeamId];
                    const awayStats = teamStatsMap[fixture.awayTeamId];

                    if (!homeStats || !awayStats) return; // Skip if teams are not in current scope

                    homeStats.P++;
                    awayStats.P++;

                    homeStats.GF += fixture.score.home;
                    homeStats.GA += fixture.score.away;
                    awayStats.GF += fixture.score.away;
                    awayStats.GA += fixture.score.home;

                    if (fixture.score.home > fixture.score.away) {
                        homeStats.W++;
                        awayStats.L++;
                        homeStats.Pts += tournament.config.pointsWin;
                    } else if (fixture.score.home < fixture.score.away) {
                        homeStats.L++;
                        awayStats.W++;
                        awayStats.Pts += tournament.config.pointsWin;
                    } else {
                        homeStats.D++;
                        awayStats.D++;
                        homeStats.Pts += tournament.config.pointsDraw;
                        awayStats.Pts += tournament.config.pointsDraw;
                    }

                    // Store head-to-head match results
                    homeStats.h2hMatches[fixture.awayTeamId] = fixture;
                    awayStats.h2hMatches[fixture.homeTeamId] = fixture;

                    // Update Fair Play (simplified: sum of cards)
                    fixture.events?.forEach(event => {
                        if (event.type === 'yellow') teamStatsMap[event.teamId].FairPlay += 1;
                        if (event.type === 'red') teamStatsMap[event.teamId].FairPlay += 3; // Red card counts as 3 yellow cards
                    });
                });

                // Calculate GD after all matches
                teamsInScope.forEach(team => {
                    if (teamStatsMap[team.id]) {
                        teamStatsMap[team.id].GD = teamStatsMap[team.id].GF - teamStatsMap[team.id].GA;
                    }
                });

                let standingsArray = Object.values(teamStatsMap);

                // Apply tie-breakers
                const tieBreakerOrder = tournament.config.tieBreakerOrder || ['points', 'goalDifference', 'goalsFor', 'headToHeadPoints', 'headToHeadGoalDifference', 'fairPlay', 'alphabetical'];

                standingsArray.sort((a, b) => {
                    for (const breaker of tieBreakerOrder) {
                        let comparison = 0;
                        switch (breaker) {
                            case 'points':
                                comparison = b.Pts - a.Pts;
                                break;
                            case 'goalDifference':
                                comparison = b.GD - a.GD;
                                break;
                            case 'goalsFor':
                                comparison = b.GF - a.GF;
                                break;
                            case 'headToHeadPoints':
                                comparison = this.compareHeadToHead(a, b, 'Pts', teamsInScope);
                                break;
                            case 'headToHeadGoalDifference':
                                comparison = this.compareHeadToHead(a, b, 'GD', teamsInScope);
                                break;
                            case 'fairPlay':
                                comparison = a.FairPlay - b.FairPlay; // Lower is better
                                break;
                            case 'alphabetical':
                                const teamA = app.data.getTeam(a.teamId);
                                const teamB = app.data.getTeam(b.teamId);
                                comparison = teamA.name.localeCompare(teamB.name);
                                break;
                        }
                        if (comparison !== 0) return comparison;
                    }
                    return 0; // Still tied
                });

                // Store standings in app.data.state
                if (!app.data.state.standings[tournamentId]) {
                    app.data.state.standings[tournamentId] = {};
                }
                if (groupId) {
                    app.data.state.standings[tournamentId][groupId] = standingsArray;
                } else {
                    app.data.state.standings[tournamentId].main = standingsArray;
                }

                return standingsArray;
            },

            compareHeadToHead(teamAStats, teamBStats, statKey, allTeamsInScope) {
                // Only apply H2H if both teams are part of the same tied group
                // and have played each other.
                const teamAId = teamAStats.teamId;
                const teamBId = teamBStats.teamId;

                const h2hFixtures = app.data.getFixtures(app.data.currentTournamentId)
                    .filter(f => f.status === 'played' &&
                                  ((f.homeTeamId === teamAId && f.awayTeamId === teamBId) ||
                                   (f.homeTeamId === teamBId && f.awayTeamId === teamAId)));

                if (h2hFixtures.length === 0) return 0; // No head-to-head matches

                let h2hA = { Pts: 0, GF: 0, GA: 0, GD: 0 };
                let h2hB = { Pts: 0, GF: 0, GA: 0, GD: 0 };

                h2hFixtures.forEach(f => {
                    const config = app.data.getTournament(app.data.currentTournamentId).config;
                    if (f.homeTeamId === teamAId) {
                        h2hA.GF += f.score.home;
                        h2hA.GA += f.score.away;
                        h2hB.GF += f.score.away;
                        h2hB.GA += f.score.home;
                        if (f.score.home > f.score.away) h2hA.Pts += config.pointsWin;
                        else if (f.score.home < f.score.away) h2hB.Pts += config.pointsWin;
                        else { h2hA.Pts += config.pointsDraw; h2hB.Pts += config.pointsDraw; }
                    } else { // f.homeTeamId === teamBId
                        h2hB.GF += f.score.home;
                        h2hB.GA += f.score.away;
                        h2hA.GF += f.score.away;
                        h2hA.GA += f.score.home;
                        if (f.score.home > f.score.away) h2hB.Pts += config.pointsWin;
                        else if (f.score.home < f.score.away) h2hA.Pts += config.pointsWin;
                        else { h2hA.Pts += config.pointsDraw; h2hB.Pts += config.pointsDraw; }
                    }
                });

                h2hA.GD = h2hA.GF - h2hA.GA;
                h2hB.GD = h2hB.GF - h2hB.GA;

                if (statKey === 'Pts') return h2hB.Pts - h2hA.Pts;
                if (statKey === 'GD') return h2hB.GD - h2hA.GD;
                if (statKey === 'GF') return h2hB.GF - h2hA.GF;

                return 0;
            },

            getAllPlayersWithStats(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return [];

                const allPlayers = [];
                tournament.teams.forEach(teamId => {
                    const players = app.data.getPlayersInTeam(teamId);
                    allPlayers.push(...players);
                });
                return allPlayers;
            },

            exportStandingsAsCsv(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return;

                let csvContent = '';
                let filename = `${tournament.name}_Standings.csv`;

                if (tournament.mode === 'league') {
                    const standings = this.calculateStandings(tournamentId);
                    csvContent += this.generateCsvTable(standings, 'League Standings');
                } else {
                    if (!tournament.groups) {
                        alert('No groups drawn to export standings.');
                        return;
                    }
                    for (const groupId in tournament.groups) {
                        const groupStandings = this.calculateStandings(tournamentId, groupId);
                        csvContent += this.generateCsvTable(groupStandings, `Group ${groupId} Standings`);
                        csvContent += '\n\n'; // Separator between groups
                    }
                    filename = `${tournament.name}_Group_Standings.csv`;
                }

                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                if (link.download !== undefined) { // Feature detection
                    const url = URL.createObjectURL(blob);
                    link.setAttribute('href', url);
                    link.setAttribute('download', filename);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } else {
                    alert('Your browser does not support downloading files directly. Please copy the content manually.');
                    console.log(csvContent);
                }
            },

            generateCsvTable(standings, title) {
                let csv = `${title}\n`;
                const headers = ['Pos', 'Team', 'P', 'W', 'D', 'L', 'GF', 'GA', 'GD', 'Pts', 'FairPlay'];
                csv += headers.join(',') + '\n';

                standings.forEach((teamStats, index) => {
                    const team = app.data.getTeam(teamStats.teamId);
                    const row = [
                        index + 1,
                        `"${team ? team.name.replace(/"/g, '""') : 'Unknown'}"`, // Handle commas in names
                        teamStats.P,
                        teamStats.W,
                        teamStats.D,
                        teamStats.L,
                        teamStats.GF,
                        teamStats.GA,
                        teamStats.GD,
                        teamStats.Pts,
                        teamStats.FairPlay
                    ];
                    csv += row.join(',') + '\n';
                });
                return csv;
            },

            simulateAllRemainingFixtures(tournamentId) {
                const tournament = app.data.getTournament(tournamentId);
                if (!tournament) return;

                const fixtures = app.data.getFixtures(tournamentId);
                const scheduledFixtures = fixtures.filter(f => f.status === 'scheduled');

                scheduledFixtures.forEach(fixture => {
                    const simulatedScore = this.simulateMatch(fixture.homeTeamId, fixture.awayTeamId);
                    let extraTime = null;
                    let penalties = null;

                    if (fixture.stage === 'knockout' && simulatedScore.home === simulatedScore.away) {
                        // Simulate extra time
                        const etScore = this.simulateMatch(fixture.homeTeamId, fixture.awayTeamId);
                        extraTime = etScore;
                        if (etScore.home === etScore.away) {
                            // Simulate penalties
                            penalties = {
                                home: Math.floor(Math.random() * 5) + 1, // 1-5 penalties
                                away: Math.floor(Math.random() * 5) + 1
                            };
                            while (penalties.home === penalties.away) { // Ensure a winner
                                penalties.away = Math.floor(Math.random() * 5) + 1;
                            }
                        }
                    }
                    this.updateMatchResult(tournamentId, fixture.id, simulatedScore, [], extraTime, penalties);
                });
                app.data.saveState();
            },

            // --- Demo Data Seeding ---
            seedDemoData() {
                // Clear existing data first
                app.data.state = {
                    tournaments: [],
                    teams: {},
                    players: {},
                    fixtures: {},
                    standings: {},
                    knockout: {},
                };
                app.data.uniqueIdCounter = 0;

                // Seed League Tournament
                const leagueTeamsData = [
                    { name: 'Manchester Utd', shortName: 'MUN', country: 'England', primaryColor: '#DA291C', secondaryColor: '#FBE122' },
                    { name: 'Liverpool FC', shortName: 'LIV', country: 'England', primaryColor: '#C8102E', secondaryColor: '#00B2A9' },
                    { name: 'Arsenal FC', shortName: 'ARS', country: 'England', primaryColor: '#EF0107', secondaryColor: '#005792' },
                    { name: 'Chelsea FC', shortName: 'CHE', country: 'England', primaryColor: '#034694', secondaryColor: '#6A7AB5' },
                    { name: 'Tottenham Hotspur', shortName: 'TOT', country: 'England', primaryColor: '#132257', secondaryColor: '#FFFFFF' },
                    { name: 'Manchester City', shortName: 'MCI', country: 'England', primaryColor: '#6CABDD', secondaryColor: '#1C2C5B' },
                    { name: 'Newcastle Utd', shortName: 'NEW', country: 'England', primaryColor: '#241F20', secondaryColor: '#FFFFFF' },
                    { name: 'Aston Villa', shortName: 'AVL', country: 'England', primaryColor: '#410E2B', secondaryColor: '#95BFE5' },
                    { name: 'Everton FC', shortName: 'EVE', country: 'England', primaryColor: '#003399', secondaryColor: '#FFFFFF' },
                    { name: 'West Ham Utd', shortName: 'WHU', country: 'England', primaryColor: '#7A263A', secondaryColor: '#1BB1E7' },
                ];
                const leaguePlayersData = {
                    'MUN': [{ name: 'Rashford', number: 10, position: 'FW' }, { name: 'Fernandes', number: 8, position: 'MF' }, { name: 'Onana', number: 24, position: 'GK' }],
                    'LIV': [{ name: 'Salah', number: 11, position: 'FW' }, { name: 'Van Dijk', number: 4, position: 'DF' }, { name: 'Alisson', number: 1, position: 'GK' }],
                    'ARS': [{ name: 'Saka', number: 7, position: 'FW' }, { name: 'Odegaard', number: 8, position: 'MF' }, { name: 'Ramsdale', number: 1, position: 'GK' }],
                    'CHE': [{ name: 'Sterling', number: 7, position: 'FW' }, { name: 'Enzo', number: 8, position: 'MF' }, { name: 'Sanchez', number: 1, position: 'GK' }],
                    'TOT': [{ name: 'Son', number: 7, position: 'FW' }, { name: 'Maddison', number: 10, position: 'MF' }, { name: 'Vicario', number: 13, position: 'GK' }],
                    'MCI': [{ name: 'Haaland', number: 9, position: 'FW' }, { name: 'De Bruyne', number: 17, position: 'MF' }, { name: 'Ederson', number: 31, position: 'GK' }],
                    'NEW': [{ name: 'Isak', number: 14, position: 'FW' }, { name: 'Guimaraes', number: 39, position: 'MF' }, { name: 'Pope', number: 22, position: 'GK' }],
                    'AVL': [{ name: 'Watkins', number: 11, position: 'FW' }, { name: 'McGinn', number: 7, position: 'MF' }, { name: 'Martinez', number: 1, position: 'GK' }],
                    'EVE': [{ name: 'Calvert-Lewin', number: 9, position: 'FW' }, { name: 'Doucoure', number: 16, position: 'MF' }, { name: 'Pickford', number: 1, position: 'GK' }],
                    'WHU': [{ name: 'Bowen', number: 20, position: 'FW' }, { name: 'Paqueta', number: 10, position: 'MF' }, { name: 'Areola', number: 23, position: 'GK' }],
                };
                const leagueTournament = this.createTournament('Premier League 2024/25', 'league');
                leagueTeamsData.forEach(teamData => {
                    const teamId = app.data.generateUniqueId();
                    app.data.state.teams[teamId] = { id: teamId, ...teamData, stats: { P: 0, W: 0, D: 0, L: 0, GF: 0, GA: 0, GD: 0, Pts: 0, FairPlay: 0 } };
                    leagueTournament.teams.push(teamId);
                    app.data.state.players[teamId] = (leaguePlayersData[teamData.shortName] || []).map(p => ({ id: app.data.generateUniqueId(), teamId, ...p, stats: { goals: 0, assists: 0, yellowCards: 0, redCards: 0, minutes: 0 } }));
                });
                this.generateFixtures(leagueTournament.id);
                this.simulateAllRemainingFixtures(leagueTournament.id); // Simulate all for demo

                // Seed Champions League Tournament
                const clTeamsData = [
                    { name: 'Real Madrid', shortName: 'RMA', country: 'Spain', primaryColor: '#FFFFFF', secondaryColor: '#000000' },
                    { name: 'FC Barcelona', shortName: 'BAR', country: 'Spain', primaryColor: '#A50044', secondaryColor: '#004D98' },
                    { name: 'Bayern Munich', shortName: 'BAY', country: 'Germany', primaryColor: '#DC052D', secondaryColor: '#FFFFFF' },
                    { name: 'Borussia Dortmund', shortName: 'BVB', country: 'Germany', primaryColor: '#FDE100', secondaryColor: '#000000' },
                    { name: 'Paris SG', shortName: 'PSG', country: 'France', primaryColor: '#004170', secondaryColor: '#DA291C' },
                    { name: 'Juventus FC', shortName: 'JUV', country: 'Italy', primaryColor: '#000000', secondaryColor: '#FFFFFF' },
                    { name: 'Inter Milan', shortName: 'INT', country: 'Italy', primaryColor: '#000000', secondaryColor: '#0070B8' },
                    { name: 'AC Milan', shortName: 'ACM', country: 'Italy', primaryColor: '#FB090B', secondaryColor: '#000000' },
                    { name: 'Man City', shortName: 'MCI', country: 'England', primaryColor: '#6CABDD', secondaryColor: '#1C2C5B' },
                    { name: 'Liverpool FC', shortName: 'LIV', country: 'England', primaryColor: '#C8102E', secondaryColor: '#00B2A9' },
                    { name: 'Ajax', shortName: 'AJX', country: 'Netherlands', primaryColor: '#D2122E', secondaryColor: '#FFFFFF' },
                    { name: 'Porto', shortName: 'POR', country: 'Portugal', primaryColor: '#004288', secondaryColor: '#FFFFFF' },
                    { name: 'Benfica', shortName: 'BEN', country: 'Portugal', primaryColor: '#ED1C24', secondaryColor: '#FFFFFF' },
                    { name: 'Atletico Madrid', shortName: 'ATM', country: 'Spain', primaryColor: '#CB3524', secondaryColor: '#FFFFFF' },
                    { name: 'RB Leipzig', shortName: 'RBL', country: 'Germany', primaryColor: '#002D62', secondaryColor: '#FFFFFF' },
                    { name: 'Napoli', shortName: 'NAP', country: 'Italy', primaryColor: '#008CFF', secondaryColor: '#FFFFFF' },
                ];
                const clTournament = this.createTournament('Champions League 2024/25', 'champions');
                clTeamsData.forEach(teamData => {
                    const teamId = app.data.generateUniqueId();
                    app.data.state.teams[teamId] = { id: teamId, ...teamData, stats: { P: 0, W: 0, D: 0, L: 0, GF: 0, GA: 0, GD: 0, Pts: 0, FairPlay: 0 } };
                    clTournament.teams.push(teamId);
                    app.data.state.players[teamId] = [{ id: app.data.generateUniqueId(), teamId, name: `${teamData.shortName} Star`, number: 9, position: 'FW', stats: { goals: 0, assists: 0, yellowCards: 0, redCards: 0, minutes: 0 } }];
                });
                this.drawGroups(clTournament.id);
                this.generateFixtures(clTournament.id);
                this.simulateAllRemainingFixtures(clTournament.id);
                this.generateKnockoutFixtures(clTournament.id); // Generate knockout after group stage is "played"
                this.simulateAllRemainingFixtures(clTournament.id); // Simulate knockout matches

                // Seed World Cup Tournament
                const wcTeamsData = [
                    { name: 'Brazil', shortName: 'BRA', country: 'Brazil', primaryColor: '#009B3A', secondaryColor: '#FFDD00' },
                    { name: 'Argentina', shortName: 'ARG', country: 'Argentina', primaryColor: '#74ACDF', secondaryColor: '#FFFFFF' },
                    { name: 'France', shortName: 'FRA', country: 'France', primaryColor: '#002395', secondaryColor: '#ED2939' },
                    { name: 'Germany', shortName: 'GER', country: 'Germany', primaryColor: '#000000', secondaryColor: '#DD0000' },
                    { name: 'Spain', shortName: 'ESP', country: 'Spain', primaryColor: '#AA151B', secondaryColor: '#F1BF00' },
                    { name: 'England', shortName: 'ENG', country: 'England', primaryColor: '#FFFFFF', secondaryColor: '#C8102E' },
                    { name: 'Portugal', shortName: 'POR', country: 'Portugal', primaryColor: '#046A38', secondaryColor: '#DA291C' },
                    { name: 'Italy', shortName: 'ITA', country: 'Italy', primaryColor: '#008C45', secondaryColor: '#FFFFFF' },
                    { name: 'Netherlands', shortName: 'NED', country: 'Netherlands', primaryColor: '#FF3C00', secondaryColor: '#FFFFFF' },
                    { name: 'Belgium', shortName: 'BEL', country: 'Belgium', primaryColor: '#FDDA24', secondaryColor: '#EF3340' },
                    { name: 'USA', shortName: 'USA', country: 'USA', primaryColor: '#002868', secondaryColor: '#BF0A30' },
                    { name: 'Mexico', shortName: 'MEX', country: 'Mexico', primaryColor: '#006847', secondaryColor: '#C8102E' },
                    { name: 'Japan', shortName: 'JPN', country: 'Japan', primaryColor: '#000080', secondaryColor: '#BC002D' },
                    { name: 'South Korea', shortName: 'KOR', country: 'South Korea', primaryColor: '#C8102E', secondaryColor: '#000080' },
                    { name: 'Australia', shortName: 'AUS', country: 'Australia', primaryColor: '#00843D', secondaryColor: '#FFCD00' },
                    { name: 'Canada', shortName: 'CAN', country: 'Canada', primaryColor: '#FF0000', secondaryColor: '#FFFFFF' },
                ];
                const wcTournament = this.createTournament('World Cup 2026', 'worldcup');
                wcTeamsData.forEach(teamData => {
                    const teamId = app.data.generateUniqueId();
                    app.data.state.teams[teamId] = { id: teamId, ...teamData, stats: { P: 0, W: 0, D: 0, L: 0, GF: 0, GA: 0, GD: 0, Pts: 0, FairPlay: 0 } };
                    wcTournament.teams.push(teamId);
                    app.data.state.players[teamId] = [{ id: app.data.generateUniqueId(), teamId, name: `${teamData.shortName} Hero`, number: 10, position: 'FW', stats: { goals: 0, assists: 0, yellowCards: 0, redCards: 0, minutes: 0 } }];
                });
                this.drawGroups(wcTournament.id);
                this.generateFixtures(wcTournament.id);
                this.simulateAllRemainingFixtures(wcTournament.id);
                this.generateKnockoutFixtures(wcTournament.id);
                this.simulateAllRemainingFixtures(wcTournament.id);

                app.data.saveState();
                alert('Demo data seeded successfully!');
            }
        };

        // --- Initialize Application ---
        document.addEventListener('DOMContentLoaded', () => {
            app.ui.init();
            app.logic.init();

            app.data.loadThemePreference(); // Load theme preference first
            app.ui.applyDarkModePreference(); // Apply it to the body

            if (!app.data.loadState()) {
                app.logic.seedDemoData();
            }
            app.ui.renderSidebar();
            app.ui.showHomeView();
        });
    </script>
</body>
</html>

-----------------------------------------------------------------------------------------------

In the tournament manager website code, fix the knockout stage logic. Currently, it shows:

Knockout Stage  
Knockout stage not generated yet. Ensure group stage is complete and go to "Manage" to generate.


But there is no action button to generate the knockout stage.

Add a clear "Generate Knockout Stage" button below that message.

The button should only appear after the group stage is marked complete.

On click, it should trigger the function that generates the knockout bracket (e.g., generateKnockoutStage() or equivalent in the code).

Once generated, the button should disappear and the knockout stage bracket should be displayed.

Make sure the design matches the rest of the UI (responsive, styled consistently).

Update the website code so this feature works properly.